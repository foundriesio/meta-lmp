From 7b834f292163a33556c47c9b62afed80b5121555 Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Thu, 9 Feb 2023 11:43:46 +0100
Subject: [PATCH] lib: ecdh1 derive: simple implementation for KDF null

Use TPM2_ECDH_ZGen as provided by tss2-esys (Esys_ECDH_ZGen()).

Test:
1) create two EC:prime256v1 keypairs (01, 02)
2) read 02 pubkey to pub2.der
3) --derive -m ECDH1-DERIVE --id 01 --input-file pub2.der --output-file /tmp/bytes1
4) read 01 pubkey to pub1.der
5) --derive -m ECDH1-DERIVE --id 02 --input-file pub1.der --output-file /tmp/bytes2
6) diff bytes1 bytes2

Upstream-Status: Backport [https://github.com/tpm2-software/tpm2-pkcs11/commit/cd7b486414a2e8819e94a6ef60c0243726c9f68f]

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
Signed-off-by: Jose Quaresma <jose.quaresma@foundries.io>
Signed-off-by: Ricardo Salveti <ricardo@foundries.io>
---
 src/lib/attrs.c  |   1 +
 src/lib/derive.c | 263 +++++++++++++++++++++++++++++++++++++++++++++++
 src/lib/derive.h |  15 +++
 src/lib/mech.c   |  18 ++++
 src/lib/object.c |  27 +++++
 src/lib/tpm.c    |  43 ++++++++
 src/lib/tpm.h    |   1 +
 src/lib/utils.c  |  58 +++++++++++
 src/lib/utils.h  |  17 +++
 src/pkcs11.c     |   3 +-
 src_vars.mk      |   4 +-
 11 files changed, 447 insertions(+), 3 deletions(-)
 create mode 100644 src/lib/derive.c
 create mode 100644 src/lib/derive.h

diff --git a/src/lib/attrs.c b/src/lib/attrs.c
index c55cffa..0c81e6a 100644
--- a/src/lib/attrs.c
+++ b/src/lib/attrs.c
@@ -979,6 +979,7 @@ static CK_RV ecc_gen_mechs(attr_list *new_pub_attrs, attr_list *new_priv_attrs)
         CKM_ECDSA_SHA256,
         CKM_ECDSA_SHA384,
         CKM_ECDSA_SHA512,
+        CKM_ECDH1_DERIVE,
     };
 
     bool r = attr_list_add_int_seq(new_pub_attrs, CKA_ALLOWED_MECHANISMS,
diff --git a/src/lib/derive.c b/src/lib/derive.c
new file mode 100644
index 0000000..fdf35b7
--- /dev/null
+++ b/src/lib/derive.c
@@ -0,0 +1,263 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+
+#include "config.h"
+#include <assert.h>
+#include <stdlib.h>
+
+#include <openssl/ec.h>
+#include <openssl/ecdsa.h>
+#include <openssl/evp.h>
+
+#include "attrs.h"
+#include "backend.h"
+#include "checks.h"
+#include "derive.h"
+#include "digest.h"
+#include "encrypt.h"
+#include "log.h"
+#include "mech.h"
+#include "ssl_util.h"
+#include "session.h"
+#include "session_ctx.h"
+#include "token.h"
+#include "tpm.h"
+
+typedef struct sanity_check_data sanity_check_data;
+struct sanity_check_data {
+    size_t len;
+};
+
+CK_RV handle_token(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_BBOOL value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_BBOOL(attr, &value);
+
+    LOGV("attr: name %s,\t\t val = %d", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV handle_class(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_OBJECT_CLASS value = 0;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_OBJECT_CLASS(attr, &value);
+
+    if (value != CKO_SECRET_KEY)
+        rv = CKR_ARGUMENTS_BAD;
+
+    LOGV("attr: name %s, \t\t val = %s", attr_get_name(attr->type), "CKO_SECRET_KEY");
+    return rv;
+}
+
+CK_RV handle_key_type(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_KEY_TYPE value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_KEY_TYPE(attr, &value);
+
+    if (value != CKK_GENERIC_SECRET)
+        rv = CKR_ARGUMENTS_BAD;
+
+    LOGV("attr: name %s,\t val = %s", attr_get_name(attr->type), "CKK_GENERIC_SECRET");
+    return rv;
+}
+
+CK_RV handle_sensitive(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    UNUSED(userdat);
+
+    LOGV("attr: name %s", attr_get_name(attr->type));
+    return CKR_OK;
+}
+
+CK_RV handle_extractable(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    UNUSED(userdat);
+
+    LOGV("attr: name %s", attr_get_name(attr->type));
+    return CKR_OK;
+}
+
+CK_RV handle_encrypt(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_BBOOL value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_BBOOL(attr, &value);
+
+    LOGV("attr: name %s,\t\t val = %d", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV handle_decrypt(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_BBOOL value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_BBOOL(attr, &value);
+
+    LOGV("attr: name %s,\t\t val = %d", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV handle_wrap(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_BBOOL value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_BBOOL(attr, &value);
+
+    LOGV("attr: name %s,\t\t val = %d", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV handle_unwrap(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_BBOOL value;
+    UNUSED(userdat);
+    CK_RV rv = attr_CK_BBOOL(attr, &value);
+
+    LOGV("attr: name %s,\t\t val = %d", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV handle_value_len(const CK_ATTRIBUTE_PTR attr, void* userdat) {
+    CK_ULONG value;
+    CK_RV rv = attr_CK_ULONG(attr, &value);
+
+    if (rv == CKR_OK) {
+        ((sanity_check_data*)userdat)->len = value;
+    }
+
+    LOGV("attr: name %s,\t val = 0x%lx", attr_get_name(attr->type), value);
+    return rv;
+}
+
+CK_RV derive(session_ctx* ctx,  CK_MECHANISM_PTR mechanism, /* public EC point */
+             CK_OBJECT_HANDLE tpm_key,   /* private key */
+             CK_ATTRIBUTE_PTR secret_template, CK_ULONG secret_template_count,
+             CK_OBJECT_HANDLE_PTR secret) { /* secret buffer in CKA_VALUE */
+    CK_RV rv = CKR_GENERAL_ERROR;
+
+    check_pointer(mechanism);
+
+    LOGV("mechanism: 0x%lx\n\thas_params: %s\n\tlen: %lu",
+         mechanism->mechanism,
+         mechanism->pParameter ? "yes" : "no", mechanism->ulParameterLen);
+
+    if (mechanism->mechanism != CKM_ECDH1_DERIVE)
+        return CKR_MECHANISM_INVALID;
+
+    if (session_ctx_opdata_is_active(ctx))
+        return CKR_OPERATION_ACTIVE;
+
+    token* tok = session_ctx_get_token(ctx);
+    assert(tok);
+
+    tobject* tobj = NULL;
+    rv = token_load_object(tok, tpm_key, &tobj);
+    if (rv != CKR_OK) {
+        return rv;
+    }
+
+    rv = object_mech_is_supported(tobj, mechanism);
+    if (rv != CKR_OK) {
+        tobject_user_decrement(tobj);
+        return rv;
+    }
+
+    /*  Validate the keysize against the one provided by the mechanism */
+    CK_ATTRIBUTE_PTR a = attr_get_attribute_by_type(tobj->attrs, CKA_EC_PARAMS);
+    if (!a) {
+        LOGE("Expected tobject to have attribute CKA_EC_PARAMS");
+        return CKR_GENERAL_ERROR;
+    }
+
+    int nid = 0;
+    rv = ssl_util_params_to_nid(a, &nid);
+    if (rv != CKR_OK) {
+        return rv;
+    }
+
+    unsigned keysize;
+    switch (nid) {
+        case NID_X9_62_prime192v1:
+            keysize = 24;
+            break;
+        case NID_secp224r1:
+            keysize = 28;
+            break;
+        case NID_X9_62_prime256v1:
+            keysize = 32;
+            break;
+        case NID_secp384r1:
+            keysize = 48;
+            break;
+        case NID_secp521r1:
+            keysize = 66;
+            break;
+        default:
+            return CKR_CURVE_NOT_SUPPORTED;
+    }
+
+    /* 1. Get the public EC point to use in the derivation from the mechanism */
+    CK_ECDH1_DERIVE_PARAMS_PTR mecha_params;
+    SAFE_CAST(mechanism, mecha_params);
+
+    if (mecha_params->kdf != CKD_NULL) {
+        return CKR_MECHANISM_PARAM_INVALID;
+    }
+
+    /* 2. Uncompressed EC_POINT: is a DER OCTECT string of 04||x||y */
+    if (!mecha_params->public_data_len ||
+        (mecha_params->public_data_len - 1) != 2 * keysize) {
+        return CKR_MECHANISM_PARAM_INVALID;
+    }
+
+    /* Validate the shared secret attributes */
+    static const attr_handler secret_check_handlers[] = {
+        { CKA_TOKEN, handle_token },
+        { CKA_CLASS, handle_class },
+        { CKA_KEY_TYPE, handle_key_type },
+        { CKA_SENSITIVE, handle_sensitive },
+        { CKA_EXTRACTABLE, handle_extractable },
+        { CKA_ENCRYPT, handle_encrypt },
+        { CKA_DECRYPT, handle_decrypt },
+        { CKA_WRAP, handle_wrap },
+        { CKA_UNWRAP, handle_unwrap },
+        { CKA_VALUE_LEN, handle_value_len },
+    };
+    sanity_check_data udata = { 0 };
+
+    rv = attr_list_raw_invoke_handlers(secret_template, secret_template_count,
+                                       secret_check_handlers,
+                                       ARRAY_LEN(secret_check_handlers),
+                                       &udata);
+    if (rv != CKR_OK) {
+        tobject_user_decrement(tobj);
+        return rv;
+    }
+
+    /* Get the shaed secret */
+    CK_BYTE* shared_secret = NULL;
+    rv = tpm_ec_ecdh1_derive(tok->tctx, tobj, /* EC private */
+                             mecha_params->public_data, /* EC point */
+                             mecha_params->public_data_len,
+                             &shared_secret, &udata.len);
+    if (rv != CKR_OK) {
+         tobject_user_decrement(tobj);
+         return rv;
+    }
+
+    CK_ATTRIBUTE shared_secret_attr = {
+        .ulValueLen = udata.len,
+        .pValue = shared_secret,
+        .type = CKA_VALUE,
+    };
+
+    /* Return the shared secret in a CKO_SECRET_KEY class object */
+    rv = object_create(ctx, secret_template, secret_template_count, secret);
+    if (rv != CKR_OK) {
+        tobject_user_decrement(tobj);
+        goto out;
+    }
+
+    rv = object_set_attributes(ctx, *secret, &shared_secret_attr, 1);
+    if (rv != CKR_OK) {
+        tobject_user_decrement(tobj);
+        goto out;
+    }
+
+out:
+    free(shared_secret);
+    return rv;
+}
diff --git a/src/lib/derive.h b/src/lib/derive.h
new file mode 100644
index 0000000..419c1fa
--- /dev/null
+++ b/src/lib/derive.h
@@ -0,0 +1,15 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+
+#ifndef _SRC_LIB_DERIVE_H_
+#define _SRC_LIB_DERIVE_H_
+
+#include "pkcs11.h"
+#include "session_ctx.h"
+
+CK_RV derive(session_ctx *ctx,
+	     CK_MECHANISM *mechanism,
+	     CK_OBJECT_HANDLE tpm_key,
+	     CK_ATTRIBUTE_PTR secret_template,
+	     CK_ULONG secret_template_count,
+	     CK_OBJECT_HANDLE_PTR secret);
+#endif
diff --git a/src/lib/mech.c b/src/lib/mech.c
index 58c04ec..7e4f363 100644
--- a/src/lib/mech.c
+++ b/src/lib/mech.c
@@ -36,6 +36,7 @@ enum mechanism_flags {
     mf_aes           = 1 << 11,
     mf_force_synthetic = 1 << 12,
     mf_hmac          = 1 << 13,
+    mf_derive        = 1 << 14,
 };
 
 typedef struct mdetail_entry mdetail_entry;
@@ -106,6 +107,7 @@ static CK_RV rsa_pkcs_hash_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_lis
 static CK_RV rsa_pss_hash_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
 static CK_RV ecc_keygen_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
 static CK_RV ecdsa_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
+static CK_RV ecdh1_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
 static CK_RV hash_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
 static CK_RV hmac_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs);
 static CK_RV rsa_pkcs_synthesizer(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs,
@@ -175,6 +177,8 @@ static const mdetail_entry _g_mechs_templ[] = {
     { .type = CKM_ECDSA_SHA384,    .flags = mf_sign|mf_verify|mf_ecc, .validator = ecdsa_validator, .get_halg = sha384_get_halg, .get_digester = sha384_get_digester, .get_tpm_opdata = tpm_ec_ecdsa_sha384_get_opdata },
     { .type = CKM_ECDSA_SHA512,    .flags = mf_sign|mf_verify|mf_ecc, .validator = ecdsa_validator, .get_halg = sha512_get_halg, .get_digester = sha512_get_digester, .get_tpm_opdata = tpm_ec_ecdsa_sha512_get_opdata },
 
+    { .type = CKM_ECDH1_DERIVE,    .flags = mf_derive | mf_ecc, .validator = ecdh1_validator },
+
     /* AES */
     { .type = CKM_AES_KEY_GEN, .flags = mf_is_keygen|mf_aes },
 
@@ -723,6 +727,20 @@ CK_RV ecdsa_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs) {
     return CKR_OK;
 }
 
+CK_RV ecdh1_validator(mdetail *m, CK_MECHANISM_PTR mech, attr_list *attrs)
+{
+    UNUSED(attrs);
+    UNUSED(m);
+
+    CK_ECDH1_DERIVE_PARAMS *params = mech->pParameter;
+
+    if (!params || !mech->ulParameterLen) {
+        return CKR_MECHANISM_PARAM_INVALID;
+    }
+
+    return CKR_OK;
+}
+
 CK_RV sha1_get_halg(CK_MECHANISM_PTR mech, CK_MECHANISM_TYPE_PTR halg) {
     UNUSED(mech);
     *halg = CKM_SHA_1;
diff --git a/src/lib/object.c b/src/lib/object.c
index e0f3786..9a3faba 100644
--- a/src/lib/object.c
+++ b/src/lib/object.c
@@ -1084,6 +1084,31 @@ out:
     return rv;
 }
 
+static CK_RV handle_secret_object(CK_ATTRIBUTE_PTR templ, CK_ULONG count, attr_list **new_attrs)
+{
+    CK_RV rv = CKR_OK;
+    /*
+     * Create a new typed attr list
+     */
+    attr_list *tmp_attrs = NULL;
+    bool res = attr_typify(templ, count, &tmp_attrs);
+    if (!res) {
+        return CKR_GENERAL_ERROR;
+    }
+    assert(tmp_attrs);
+
+    /* Set any defaults and do error checking */
+    rv = attr_common_add_storage(&tmp_attrs);
+    if (rv != CKR_OK) {
+        return rv;
+    }
+
+    /* transfer ownership to caller */
+    *new_attrs = tmp_attrs;
+    tmp_attrs = NULL;
+
+    return rv;
+}
 
 CK_RV object_create(session_ctx *ctx, CK_ATTRIBUTE *templ, CK_ULONG count, CK_OBJECT_HANDLE *object) {
     assert(ctx);
@@ -1166,6 +1191,8 @@ CK_RV object_create(session_ctx *ctx, CK_ATTRIBUTE *templ, CK_ULONG count, CK_OB
         rv = handle_data_object(tok, templ, count, &new_attrs);
     } else if (clazz == CKO_CERTIFICATE) {
         rv = handle_cert_object(templ, count, &new_attrs);
+    } else if (clazz == CKO_SECRET_KEY) {
+        rv = handle_secret_object(templ, count, &new_attrs);
     } else {
         LOGE("Can only create RSA Public key objects or"
                 " data objects, CKA_CLASS(%lu), CKA_KEY_TYPE(%lu)",
diff --git a/src/lib/tpm.c b/src/lib/tpm.c
index 456a904..1646624 100644
--- a/src/lib/tpm.c
+++ b/src/lib/tpm.c
@@ -4637,3 +4637,46 @@ out:
     return rv;
 }
 
+CK_RV tpm_ec_ecdh1_derive(tpm_ctx *tctx, tobject *tobj, uint8_t *ecc_point,
+                          size_t ecc_point_len, uint8_t **secret,
+                          size_t *secret_len)
+{
+    TPM2B_ECC_POINT *out_point = NULL;
+    TPM2B_ECC_POINT in_point = { };
+    CK_RV rv = CKR_GENERAL_ERROR;
+
+    if (!tobj || !tctx || !ecc_point || !ecc_point_len || !secret_len) {
+        return CKR_ARGUMENTS_BAD;
+    }
+
+    rv = utils_uncompressed_ecpoint_to_tpm2b(ecc_point, &in_point, ecc_point_len);
+    if (rv != CKR_OK) {
+        return rv;
+    }
+
+    bool res = set_esys_auth(tctx->esys_ctx, tobj->tpm_handle, tobj->unsealed_auth);
+    if (!res) {
+        return CKR_GENERAL_ERROR;
+    }
+
+    rv = Esys_ECDH_ZGen(tctx->esys_ctx, tobj->tpm_handle, ESYS_TR_PASSWORD,
+                        ESYS_TR_NONE, ESYS_TR_NONE, &in_point, &out_point);
+    if (rv != CKR_OK) {
+        return rv;
+    }
+
+    *secret = calloc(1, out_point->point.x.size);
+    if (!*secret) {
+        rv = CKR_HOST_MEMORY;
+        goto out;
+    }
+
+    *secret_len = out_point->point.x.size;
+    memcpy(*secret, out_point->point.x.buffer, *secret_len);
+
+out:
+    free(out_point);
+
+    return rv;
+}
+
diff --git a/src/lib/tpm.h b/src/lib/tpm.h
index c26252e..2424608 100644
--- a/src/lib/tpm.h
+++ b/src/lib/tpm.h
@@ -122,6 +122,7 @@ CK_RV tpm_ec_ecdsa_sha1_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR m
 CK_RV tpm_ec_ecdsa_sha256_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR mech, tobject *tobj, tpm_op_data **opdata);
 CK_RV tpm_ec_ecdsa_sha384_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR mech, tobject *tobj, tpm_op_data **opdata);
 CK_RV tpm_ec_ecdsa_sha512_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR mech, tobject *tobj, tpm_op_data **opdata);
+CK_RV tpm_ec_ecdh1_derive(tpm_ctx *tctx, tobject *tobj, unsigned char *pubkey, size_t pubkey_len, unsigned char **psec, size_t *pseclen);
 
 CK_RV tpm_aes_cbc_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR mech, tobject *tobj, tpm_op_data **opdata);
 CK_RV tpm_aes_cfb_get_opdata(mdetail *m, tpm_ctx *tctx, CK_MECHANISM_PTR mech, tobject *tobj, tpm_op_data **opdata);
diff --git a/src/lib/utils.c b/src/lib/utils.c
index e0539ab..882f1bd 100644
--- a/src/lib/utils.c
+++ b/src/lib/utils.c
@@ -555,3 +555,61 @@ void parse_lib_version(const char *userbuf, CK_BYTE *major, CK_BYTE *minor) {
 out:
     free(buf);
 }
+
+CK_RV utils_uncompressed_ecpoint_to_tpm2b(uint8_t* from, TPM2B_ECC_POINT* to, size_t len) {
+
+    const size_t ecc_key_sizes[] = { 24, 28, 32, 48, 64, 66 };
+    size_t tpm2b_size = 0;
+    size_t i = 0;
+
+    /*
+     * Uncompressed EC_POINT is DER OCTET STRING of "04||x||y"
+     * (discard the 0x04 and adjust the length)
+     */
+    if (!from || !to || !len || len < 49 || len > 133) {
+        return CKR_ARGUMENTS_BAD;
+    }
+
+    if (*from++ != 0x04) {
+        return CKR_ARGUMENTS_BAD;
+    }
+
+    /* Remove the 0x04 tag from the length */
+    len = len - 1;
+
+    tpm2b_size = len / 2;
+    for (i = 0; i < ARRAY_LEN(ecc_key_sizes); i++) {
+        if (tpm2b_size == ecc_key_sizes[i]) {
+            break;
+        }
+    }
+
+    if (i >= ARRAY_LEN(ecc_key_sizes)) {
+        return CKR_ARGUMENTS_BAD;
+    }
+
+    /* Key has the expected length */
+    if (tpm2b_size > sizeof(to->point.x.buffer)) {
+        LOGW("TPM2B_ECC_POINT buffer too small, truncate possible padding");
+        memcpy(to->point.x.buffer, from, sizeof(to->point.x.buffer));
+        to->point.x.size = sizeof(to->point.x.buffer);
+    } else {
+        memcpy(to->point.x.buffer, from, tpm2b_size);
+        to->point.x.size = tpm2b_size;
+    }
+
+    from = from + tpm2b_size;
+
+    if (tpm2b_size > sizeof(to->point.y.buffer)) {
+        LOGW("TPM2B_ECC_POINT buffer too small, truncate possible padding");
+        memcpy(to->point.y.buffer, from, sizeof(to->point.y.buffer));
+        to->point.y.size = sizeof(to->point.y.buffer);
+    } else {
+        memcpy(to->point.y.buffer, from, tpm2b_size);
+        to->point.y.size = tpm2b_size;
+    }
+
+    to->size = to->point.y.size + to->point.x.size;
+
+    return CKR_OK;
+}
diff --git a/src/lib/utils.h b/src/lib/utils.h
index 3c176c6..33c8be7 100644
--- a/src/lib/utils.h
+++ b/src/lib/utils.h
@@ -8,6 +8,8 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <tss2/tss2_tpm2_types.h>
+
 #include "config.h"
 #include "log.h"
 #include "pkcs11.h"
@@ -128,6 +130,21 @@ CK_RV apply_pkcs7_pad(const CK_BYTE_PTR in, CK_ULONG inlen,
  */
 void parse_lib_version(const char *buf, CK_BYTE *major, CK_BYTE *minor);
 
+/**
+*
+* Given an uncompressed ECC point in DER (0x04||x||y) populate a TPM2B_ECC_POINT
+* @param from
+*  ECC point in uncompressed DER format (0x04||x||y)
+* @param to
+*  Pointer to the TPM2B_ECC_POINT to populate
+* @param len
+*  Length of the ECC point in uncompressed DER format
+* @return CK_RV
+*   CKR_ARGUMENTS_BAD if the uncompressed ECC point is invalid
+*   CKR_OK on success
+*/
+CK_RV utils_uncompressed_ecpoint_to_tpm2b(uint8_t* from, TPM2B_ECC_POINT* to, size_t len);
+
 /*
  * Work around bugs in clang not including the builtins, and when asan is enabled
  * ending up in a nightmare of having both the ASAN and BUILTINS defined and linked
diff --git a/src/pkcs11.c b/src/pkcs11.c
index 4494c68..6d7b596 100644
--- a/src/pkcs11.c
+++ b/src/pkcs11.c
@@ -7,6 +7,7 @@
 
 #include "pkcs11.h"
 
+#include "derive.h"
 #include "digest.h"
 #include "encrypt.h"
 #include "key.h"
@@ -630,7 +631,7 @@ CK_RV C_UnwrapKey (CK_SESSION_HANDLE session, CK_MECHANISM *mechanism, CK_OBJECT
 }
 
 CK_RV C_DeriveKey (CK_SESSION_HANDLE session, CK_MECHANISM *mechanism, CK_OBJECT_HANDLE base_key, CK_ATTRIBUTE *templ, CK_ULONG attribute_count, CK_OBJECT_HANDLE *key) {
-    TOKEN_UNSUPPORTED;
+    TOKEN_WITH_LOCK_BY_SESSION_USER_RO(derive, session, mechanism, base_key, templ, attribute_count, key);
 }
 
 CK_RV C_SeedRandom (CK_SESSION_HANDLE session, CK_BYTE_PTR seed, CK_ULONG seed_len) {
diff --git a/src_vars.mk b/src_vars.mk
index ec734b5..ddc247f 100644
--- a/src_vars.mk
+++ b/src_vars.mk
@@ -1,6 +1,6 @@
 LIB_PKCS11_C = src/pkcs11.c 
 LIB_PKCS11_H = src/pkcs11.h 
 LIB_PKCS11_SRC = $(LIB_PKCS11_C) $(LIB_PKCS11_H)
-LIB_PKCS11_INTERNAL_LIB_C = src/lib/attrs.c src/lib/backend.c src/lib/backend_esysdb.c src/lib/backend_fapi.c src/lib/db.c src/lib/digest.c src/lib/emitter.c src/lib/encrypt.c src/lib/general.c src/lib/key.c src/lib/mech.c src/lib/mutex.c src/lib/object.c src/lib/parser.c src/lib/random.c src/lib/session.c src/lib/session_ctx.c src/lib/session_table.c src/lib/sign.c src/lib/slot.c src/lib/ssl_util.c src/lib/token.c src/lib/tpm.c src/lib/twist.c src/lib/typed_memory.c src/lib/utils.c 
-LIB_PKCS11_INTERNAL_LIB_H = src/lib/attrs.h src/lib/backend.h src/lib/backend_esysdb.h src/lib/backend_fapi.h src/lib/checks.h src/lib/db.h src/lib/debug.h src/lib/digest.h src/lib/emitter.h src/lib/encrypt.h src/lib/general.h src/lib/key.h src/lib/list.h src/lib/log.h src/lib/mech.h src/lib/mutex.h src/lib/object.h src/lib/parser.h src/lib/random.h src/lib/session.h src/lib/session_ctx.h src/lib/session_table.h src/lib/sign.h src/lib/slot.h src/lib/ssl_util.h src/lib/token.h src/lib/tpm.h src/lib/twist.h src/lib/typed_memory.h src/lib/utils.h 
+LIB_PKCS11_INTERNAL_LIB_C = src/lib/attrs.c src/lib/backend.c src/lib/backend_esysdb.c src/lib/backend_fapi.c src/lib/db.c src/lib/derive.c src/lib/digest.c src/lib/emitter.c src/lib/encrypt.c src/lib/general.c src/lib/key.c src/lib/mech.c src/lib/mutex.c src/lib/object.c src/lib/parser.c src/lib/random.c src/lib/session.c src/lib/session_ctx.c src/lib/session_table.c src/lib/sign.c src/lib/slot.c src/lib/ssl_util.c src/lib/token.c src/lib/tpm.c src/lib/twist.c src/lib/typed_memory.c src/lib/utils.c 
+LIB_PKCS11_INTERNAL_LIB_H = src/lib/attrs.h src/lib/backend.h src/lib/backend_esysdb.h src/lib/backend_fapi.h src/lib/checks.h src/lib/db.h src/lib/debug.h src/lib/derive.h src/lib/digest.h src/lib/emitter.h src/lib/encrypt.h src/lib/general.h src/lib/key.h src/lib/list.h src/lib/log.h src/lib/mech.h src/lib/mutex.h src/lib/object.h src/lib/parser.h src/lib/random.h src/lib/session.h src/lib/session_ctx.h src/lib/session_table.h src/lib/sign.h src/lib/slot.h src/lib/ssl_util.h src/lib/token.h src/lib/tpm.h src/lib/twist.h src/lib/typed_memory.h src/lib/utils.h 
 LIB_PKCS11_INTERNAL_LIB_SRC = $(LIB_PKCS11_INTERNAL_LIB_C) $(LIB_PKCS11_INTERNAL_LIB_H)
-- 
2.34.1

