#!/bin/sh
#
# Copyright (C) 2024 Foundries.IO
#
# SPDX-License-Identifier: MIT
#
set -e

scriptName="$(basename "$0")"
BLS_DIR=/boot/loader/entries

error_exit() {
	if [ -n "${1}" ] ; then
		echo "ERROR:  ${1}"
	else
		echo "ERROR: Command execution failure"
	fi
	exit 1
}

debug() {
	if [ -n "${1}" ] ; then
		echo "DEBUG: ${1}"
	else
		echo "DEBUG: Command execution failure"
	fi
}

matches() {
	input="$1"
	pattern="$2"
	echo "$input" | grep -q "$pattern"
}

get_target_sysroot () {
	if ls $BLS_DIR/ostree-2*.conf &>/dev/null; then
		bls_id=2
	else
		bls_id=1
	fi

	sysroot_path=$(cat $BLS_DIR/ostree-${bls_id}*.conf | grep "options "| awk '{split($0,a,"ostree="); print a[2]}')
	echo "$sysroot_path"
}

if [ -z "${FIO_OSTREE_TARGET_SYSROOT}" ]; then
	# Try to parse it from the target sysroot boot entry
	FIO_OSTREE_TARGET_SYSROOT=$(get_target_sysroot)
fi

@@INCLUDE_SOC_FUNCTIONS@@

# SoC-agnostic functions. Create fioefi_soc.sh.in with SoC-specific
# implementation
getenv() {
	exit 0
}

setenv() {
	rc=0

	if [ "${1}" = "upgrade_available" ]; then
		if [ "${2}" = "0" ]; then
			/usr/lib/systemd/systemd-bless-boot good || rc=1
		fi
	fi

	exit $rc
}

if matches "$scriptName" "printenv"; then
	if type 'getenv_soc' 2>/dev/null | grep -q 'function'; then
		getenv_soc "${1}"
	else
		getenv "${1}"
	fi
elif matches "$scriptName" "setenv"; then
	if type 'setenv_soc' 2>/dev/null | grep -q 'function'; then
		setenv_soc "${1}" "${2}"
	else
		setenv "${1}" "${2}"
	fi
fi
