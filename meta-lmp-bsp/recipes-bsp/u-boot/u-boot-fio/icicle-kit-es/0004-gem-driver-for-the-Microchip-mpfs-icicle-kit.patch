From 59013e81458d7a2d45b367653f06224411e54ec1 Mon Sep 17 00:00:00 2001
From: Padmarao Begari <padmarao.begari@microchip.com>
Date: Tue, 11 Aug 2020 13:56:10 +0530
Subject: [PATCH 4/4] gem driver for the Microchip mpfs-icicle kit.

gem and vitesse driver for 64-bit dma access

Signed-off-by: Padmarao Begari <padmarao.begari@microchip.com>
---
 drivers/net/macb.c        | 48 ++++++++++++++++++++++++++++++++-------
 drivers/net/macb.h        |  3 ++-
 drivers/net/phy/vitesse.c | 28 ++++++++++++++++++++++-
 3 files changed, 69 insertions(+), 10 deletions(-)

diff --git a/drivers/net/macb.c b/drivers/net/macb.c
index b80a259ff7..2bef32f50e 100644
--- a/drivers/net/macb.c
+++ b/drivers/net/macb.c
@@ -81,6 +81,8 @@ DECLARE_GLOBAL_DATA_PTR;
 struct macb_dma_desc {
 	u32	addr;
 	u32	ctrl;
+	u32 addr_high;
+	u32 unused;
 };
 
 #define DMA_DESC_BYTES(n)	(n * sizeof(struct macb_dma_desc))
@@ -329,6 +331,7 @@ static int _macb_send(struct macb_device *macb, const char *name, void *packet,
 	macb->tx_ring[tx_head].addr = paddr;
 	barrier();
 	macb_flush_ring_desc(macb, TX);
+	macb_writel(macb, TBQP, (u32)&macb->tx_ring[tx_head]);
 	macb_writel(macb, NCR, MACB_BIT(TE) | MACB_BIT(RE) | MACB_BIT(TSTART));
 
 	/*
@@ -467,18 +470,18 @@ static void macb_phy_reset(struct macb_device *macb, const char *name)
 
 static int macb_phy_find(struct macb_device *macb, const char *name)
 {
-	int i;
+//	int i;
 	u16 phy_id;
 
 	/* Search for PHY... */
-	for (i = 0; i < 32; i++) {
-		macb->phy_addr = i;
+	//for (i = 0; i < 32; i++) {
+		macb->phy_addr = 9;
 		phy_id = macb_mdio_read(macb, macb->phy_addr, MII_PHYSID1);
 		if (phy_id != 0xffff) {
-			printf("%s: PHY present at %d\n", name, i);
+			printf("%s: PHY present at %d\n", name, macb->phy_addr);
 			return 0;
 		}
-	}
+	//}
 
 	/* PHY isn't up to snuff */
 	printf("%s: PHY not found\n", name);
@@ -732,9 +735,10 @@ static int gmac_init_multi_queues(struct macb_device *macb)
 	flush_dcache_range(macb->dummy_desc_dma, macb->dummy_desc_dma +
 			ALIGN(MACB_TX_DUMMY_DMA_DESC_SIZE, PKTALIGN));
 
-	for (i = 1; i < num_queues; i++)
+	for (i = 1; i < num_queues; i++) {
 		gem_writel_queue_TBQP(macb, macb->dummy_desc_dma, i - 1);
-
+		gem_writel_queue_RBQP(macb, macb->dummy_desc_dma, i - 1);
+	}
 	return 0;
 }
 
@@ -759,7 +763,8 @@ static void gmac_configure_dma(struct macb_device *macb)
 	else
 		dmacfg &= ~GEM_BIT(ENDIA_DESC);
 
-	dmacfg &= ~GEM_BIT(ADDR64);
+//	dmacfg &= ~GEM_BIT(ADDR64);
+	dmacfg |= GEM_BIT(ADDR64);
 	gem_writel(macb, DMACFG, dmacfg);
 }
 
@@ -788,6 +793,7 @@ static int _macb_init(struct macb_device *macb, const char *name)
 			paddr |= MACB_BIT(RX_WRAP);
 		macb->rx_ring[i].addr = paddr;
 		macb->rx_ring[i].ctrl = 0;
+		macb->rx_ring[i].addr_high = 0x0;
 		paddr += macb->rx_buffer_size;
 	}
 	macb_flush_ring_desc(macb, RX);
@@ -800,6 +806,7 @@ static int _macb_init(struct macb_device *macb, const char *name)
 				MACB_BIT(TX_WRAP);
 		else
 			macb->tx_ring[i].ctrl = MACB_BIT(TX_USED);
+		macb->tx_ring[i].addr_high = 0x0;
 	}
 	macb_flush_ring_desc(macb, TX);
 
@@ -916,6 +923,28 @@ static int _macb_write_hwaddr(struct macb_device *macb, unsigned char *enetaddr)
 	u32 hwaddr_bottom;
 	u16 hwaddr_top;
 
+	char mac_addr_buff[20], *p_mac_addr_buff;
+	u8 *hw_mac_addr;
+	u16 value, i;
+	const char hex_ascii[] = "0123456789abcdef";
+
+	hw_mac_addr = enetaddr;
+	p_mac_addr_buff = mac_addr_buff;
+
+	*p_mac_addr_buff++ = '[';
+	for (i = 0; i < 6; i++) {
+		value = hw_mac_addr[i] / 16;
+		*p_mac_addr_buff++ = hex_ascii[value];
+		value = hw_mac_addr[i] % 16;
+		*p_mac_addr_buff++ = hex_ascii[value];
+		*p_mac_addr_buff++ = ' ';
+	}
+	--p_mac_addr_buff;
+	*p_mac_addr_buff++ = ']';
+	*p_mac_addr_buff = '\0';
+
+	env_set("icicle_mac_addr", mac_addr_buff);
+
 	/* set hardware address */
 	hwaddr_bottom = enetaddr[0] | enetaddr[1] << 8 |
 			enetaddr[2] << 16 | enetaddr[3] << 24;
@@ -1188,6 +1217,7 @@ static const struct eth_ops macb_eth_ops = {
 static int macb_enable_clk(struct udevice *dev)
 {
 	struct macb_device *macb = dev_get_priv(dev);
+#ifdef COMMENT_CLOCK_CODE
 	struct clk clk;
 	ulong clk_rate;
 	int ret;
@@ -1210,7 +1240,9 @@ static int macb_enable_clk(struct udevice *dev)
 		return -EINVAL;
 
 	macb->pclk_rate = clk_rate;
+#endif
 
+	macb->pclk_rate = PFSOC_GEM_CLK_FREQ;
 	return 0;
 }
 #endif
diff --git a/drivers/net/macb.h b/drivers/net/macb.h
index 9b16383eba..9bdf68fa19 100644
--- a/drivers/net/macb.h
+++ b/drivers/net/macb.h
@@ -768,5 +768,6 @@
 #define GEM_RX_CSUM_CHECKED_MASK		2
 #define gem_writel_queue_TBQP(port, value, queue_num)	\
 	writel((value), (port)->regs + GEM_TBQP(queue_num))
-
+#define gem_writel_queue_RBQP(port, value, queue_num)   \
+	writel((value), (port)->regs + GEM_RBQP(queue_num))
 #endif /* __DRIVERS_MACB_H__ */
diff --git a/drivers/net/phy/vitesse.c b/drivers/net/phy/vitesse.c
index eca26c9893..0dad99a18b 100644
--- a/drivers/net/phy/vitesse.c
+++ b/drivers/net/phy/vitesse.c
@@ -266,6 +266,32 @@ static int vsc8514_config(struct phy_device *phydev)
 	return 0;
 }
 
+static int vsc8662_config(struct phy_device *phydev)
+{
+	u32 val;
+
+	/* Enable MAC interface auto-negotiation */
+	phy_write(phydev, MDIO_DEVAD_NONE, PHY_EXT_PAGE_ACCESS, 0);
+	val = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_EPHY_CON);
+	val |= ((1 << 13) | 0x880);
+	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_EPHY_CON, val);
+
+	phy_write(phydev, MDIO_DEVAD_NONE, PHY_EXT_PAGE_ACCESS, PHY_EXT_PAGE_ACCESS_EXTENDED);
+	val = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_SERDES_AND_SIGDET);
+	val |= (1 << 11);
+	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_SERDES_AND_SIGDET, val);
+	phy_write(phydev, MDIO_DEVAD_NONE, PHY_EXT_PAGE_ACCESS, 0);
+
+	/* Enable LED blink */
+	val = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_LED_CON);
+	val &= ~(1 << 2);
+	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_VSC8664_LED_CON, val);
+
+	genphy_config_aneg(phydev);
+
+	return 0;
+}
+
 static int vsc8664_config(struct phy_device *phydev)
 {
 	u32 val;
@@ -388,7 +414,7 @@ static struct phy_driver VSC8662_driver = {
 	.uid = 0x70660,
 	.mask = 0xffff0,
 	.features = PHY_GBIT_FEATURES,
-	.config = &genphy_config_aneg,
+	.config = &vsc8662_config,
 	.startup = &vitesse_startup,
 	.shutdown = &genphy_shutdown,
 };
-- 
2.28.0

