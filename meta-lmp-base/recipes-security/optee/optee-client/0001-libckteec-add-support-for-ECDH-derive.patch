From 1f8c1d3702ab706ad734ac5f005dd87090ba7895 Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Thu, 2 Dec 2021 23:06:01 +0100
Subject: [PATCH] libckteec: add support for ECDH derive

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
---
 libckteec/include/pkcs11.h   | 17 ++++++++++++++
 libckteec/src/serialize_ck.c | 43 ++++++++++++++++++++++++++++++++++++
 2 files changed, 60 insertions(+)

diff --git a/libckteec/include/pkcs11.h b/libckteec/include/pkcs11.h
index f658db6..14b53de 100644
--- a/libckteec/include/pkcs11.h
+++ b/libckteec/include/pkcs11.h
@@ -22,6 +22,8 @@ typedef unsigned char CK_BYTE;
 typedef unsigned long CK_ULONG;
 typedef long CK_LONG;
 
+typedef CK_ULONG	CK_EC_KDF_TYPE;
+
 typedef CK_BYTE CK_CHAR;
 typedef CK_BYTE CK_UTF8CHAR;
 
@@ -438,6 +440,21 @@ typedef CK_ULONG CK_RSA_PKCS_OAEP_SOURCE_TYPE;
 typedef CK_ULONG CK_MAC_GENERAL_PARAMS;
 typedef CK_MAC_GENERAL_PARAMS *CK_MAC_GENERAL_PARAMS_PTR;
 
+/*
+ * Elliptic curve Diffie-Hellman key derivation
+ * Elliptic curve Diffie-Hellman cofactor key derivation parameters
+ */
+typedef struct CK_ECDH1_DERIVE_PARAMS	CK_ECDH1_DERIVE_PARAMS;
+typedef struct CK_ECDH1_DERIVE_PARAMS	*CK_ECDH1_DERIVE_PARAMS_PTR;
+
+struct CK_ECDH1_DERIVE_PARAMS {
+	CK_EC_KDF_TYPE		kdf;
+	CK_ULONG		ulSharedDataLen;
+	CK_BYTE_PTR		pSharedData;
+	CK_ULONG		ulPublicDataLen;
+	CK_BYTE_PTR		pPublicData;
+};
+
 /* AES CBC encryption parameters */
 typedef struct CK_AES_CBC_ENCRYPT_DATA_PARAMS CK_AES_CBC_ENCRYPT_DATA_PARAMS;
 typedef struct CK_AES_CBC_ENCRYPT_DATA_PARAMS
diff --git a/libckteec/src/serialize_ck.c b/libckteec/src/serialize_ck.c
index edb8d09..726afbb 100644
--- a/libckteec/src/serialize_ck.c
+++ b/libckteec/src/serialize_ck.c
@@ -451,6 +451,45 @@ static CK_RV serialize_mecha_key_deriv_str(struct serializer *obj,
 	return serialize_buffer(obj, param->pData, param->ulLen);
 }
 
+static CK_RV serialize_mecha_ecdh1_derive_param(struct serializer *obj,
+						CK_MECHANISM_PTR mecha)
+{
+	CK_ECDH1_DERIVE_PARAMS *params = mecha->pParameter;
+	CK_RV rv;
+	size_t params_size = 3 * sizeof(uint32_t) + params->ulSharedDataLen +
+			     params->ulPublicDataLen;
+
+	rv = serialize_32b(obj, obj->type);
+	if (rv)
+		return rv;
+
+	rv = serialize_32b(obj, params_size);
+	if (rv)
+		return rv;
+
+	rv = serialize_32b(obj, params->kdf);
+	if (rv)
+		return rv;
+
+	rv = serialize_32b(obj, params->ulSharedDataLen);
+	if (rv)
+		return rv;
+
+	rv = serialize_buffer(obj, params->pSharedData,
+			      params->ulSharedDataLen);
+	if (rv)
+		return rv;
+
+	rv = serialize_32b(obj, params->ulPublicDataLen);
+	if (rv)
+		return rv;
+
+	return serialize_buffer(obj, params->pPublicData,
+				params->ulPublicDataLen);
+}
+
+
+
 static CK_RV serialize_mecha_aes_cbc_encrypt_data(struct serializer *obj,
 						  CK_MECHANISM_PTR mecha)
 {
@@ -647,6 +686,10 @@ CK_RV serialize_ck_mecha_params(struct serializer *obj,
 	case CKM_AES_ECB_ENCRYPT_DATA:
 		return serialize_mecha_key_deriv_str(obj, &mecha);
 
+	case CKM_ECDH1_DERIVE:
+	case CKM_ECDH1_COFACTOR_DERIVE:
+		return serialize_mecha_ecdh1_derive_param(obj, &mecha);
+
 	case CKM_AES_CBC_ENCRYPT_DATA:
 		return serialize_mecha_aes_cbc_encrypt_data(obj, &mecha);
 
-- 
2.31.1

