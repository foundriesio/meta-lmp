From c6e4c95d3878bf815b9ff3ffb180c3ff7523ddf9 Mon Sep 17 00:00:00 2001
From: Andy Doan <andy@foundries.io>
Date: Tue, 17 Sep 2019 17:18:11 -0500
Subject: [PATCH 02/12] storage: Load/save custom data with installed version

Signed-off-by: Andy Doan <andy@foundries.io>
---
 src/libaktualizr/storage/sqlstorage.cc        | 52 +++++++++++++------
 .../storage/storage_common_test.cc            |  7 +++
 src/libaktualizr/uptane/tuf.h                 |  1 +
 3 files changed, 45 insertions(+), 15 deletions(-)

diff --git a/src/libaktualizr/storage/sqlstorage.cc b/src/libaktualizr/storage/sqlstorage.cc
index 171467ca..b391948e 100644
--- a/src/libaktualizr/storage/sqlstorage.cc
+++ b/src/libaktualizr/storage/sqlstorage.cc
@@ -986,15 +986,15 @@ void SQLStorage::saveInstalledVersion(const std::string& ecu_serial, const Uptan
       return;
     }
   } else {
-    auto statement =
-        db.prepareStatement<std::string, std::string, std::string, std::string, int64_t, std::string, int, int>(
-            "INSERT INTO installed_versions(ecu_serial, sha256, name, hashes, length, correlation_id, "
-            "is_current, is_pending, was_installed) VALUES (?,?,?,?,?,?,?,?,?);",
-            ecu_serial_real, target.sha256Hash(), target.filename(), hashes_encoded,
-            static_cast<int64_t>(target.length()), target.correlation_id(),
-            static_cast<int>(update_mode == InstalledVersionUpdateMode::kCurrent),
-            static_cast<int>(update_mode == InstalledVersionUpdateMode::kPending),
-            static_cast<int>(update_mode == InstalledVersionUpdateMode::kCurrent));
+    std::string custom = Json::FastWriter().write(target.custom_data());
+    auto statement = db.prepareStatement<std::string, std::string, std::string, std::string, int64_t, std::string,
+                                         std::string, int, int>(
+        "INSERT INTO installed_versions(ecu_serial, sha256, name, hashes, length, custom_meta, correlation_id, "
+        "is_current, is_pending, was_installed) VALUES (?,?,?,?,?,?,?,?,?,?);",
+        ecu_serial_real, target.sha256Hash(), target.filename(), hashes_encoded, static_cast<int64_t>(target.length()),
+        custom, target.correlation_id(), static_cast<int>(update_mode == InstalledVersionUpdateMode::kCurrent),
+        static_cast<int>(update_mode == InstalledVersionUpdateMode::kPending),
+        static_cast<int>(update_mode == InstalledVersionUpdateMode::kCurrent));
 
     if (statement.step() != SQLITE_DONE) {
       LOG_ERROR << "Can't set installed_versions: " << db.errmsg();
@@ -1036,11 +1036,11 @@ bool SQLStorage::loadInstallationLog(const std::string& ecu_serial, std::vector<
   loadEcuMap(db, ecu_serial_real, ecu_map);
 
   std::string query =
-      "SELECT id, sha256, name, hashes, length, correlation_id FROM installed_versions WHERE "
+      "SELECT id, sha256, name, hashes, length, correlation_id, custom_meta FROM installed_versions WHERE "
       "ecu_serial = ? ORDER BY id;";
   if (only_installed) {
     query =
-        "SELECT id, sha256, name, hashes, length, correlation_id FROM installed_versions WHERE "
+        "SELECT id, sha256, name, hashes, length, correlation_id, custom_meta FROM installed_versions WHERE "
         "ecu_serial = ? AND was_installed = 1 ORDER BY id;";
   }
 
@@ -1058,6 +1058,7 @@ bool SQLStorage::loadInstallationLog(const std::string& ecu_serial, std::vector<
       auto hashes_str = statement.get_result_col_str(3).value();
       auto length = statement.get_result_col_int(4);
       auto correlation_id = statement.get_result_col_str(5).value();
+      auto custom_str = statement.get_result_col_str(6).value();
 
       // note: sha256 should always be present and is used to uniquely identify
       // a version. It should normally be part of the hash list as well.
@@ -1070,7 +1071,17 @@ bool SQLStorage::loadInstallationLog(const std::string& ecu_serial, std::vector<
         hashes.emplace_back(Uptane::Hash::Type::kSha256, sha256);
       }
 
-      new_log.emplace_back(filename, ecu_map, hashes, static_cast<uint64_t>(length), correlation_id);
+      Uptane::Target t(filename, ecu_map, hashes, static_cast<uint64_t>(length), correlation_id);
+      if (!custom_str.empty()) {
+        Json::Reader reader;
+        Json::Value custom;
+        if (reader.parse(custom_str, custom)) {
+          t.updateCustom(custom);
+        } else {
+          LOG_ERROR << "Unable to parse custom data: " << reader.getFormatedErrorMessages();
+        }
+      }
+      new_log.emplace_back(t);
 
       ids_map[id] = k;
       k++;
@@ -1108,6 +1119,7 @@ bool SQLStorage::loadInstalledVersions(const std::string& ecu_serial, boost::opt
     auto hashes_str = statement.get_result_col_str(2).value();
     auto length = statement.get_result_col_int(3);
     auto correlation_id = statement.get_result_col_str(4).value();
+    auto custom_str = statement.get_result_col_str(5).value();
 
     // note: sha256 should always be present and is used to uniquely identify
     // a version. It should normally be part of the hash list as well.
@@ -1119,13 +1131,23 @@ bool SQLStorage::loadInstalledVersions(const std::string& ecu_serial, boost::opt
       LOG_WARNING << "No sha256 in hashes list";
       hashes.emplace_back(Uptane::Hash::Type::kSha256, sha256);
     }
+    Uptane::Target t(filename, ecu_map, hashes, static_cast<uint64_t>(length), correlation_id);
+    if (!custom_str.empty()) {
+      Json::Reader reader;
+      Json::Value custom;
+      if (reader.parse(custom_str, custom)) {
+        t.updateCustom(custom);
+      } else {
+        LOG_ERROR << "Unable to parse custom data: " << reader.getFormatedErrorMessages();
+      }
+    }
 
-    return Uptane::Target(filename, ecu_map, hashes, static_cast<uint64_t>(length), correlation_id);
+    return t;
   };
 
   if (current_version != nullptr) {
     auto statement = db.prepareStatement<std::string>(
-        "SELECT sha256, name, hashes, length, correlation_id FROM installed_versions WHERE "
+        "SELECT sha256, name, hashes, length, correlation_id, custom_meta FROM installed_versions WHERE "
         "ecu_serial = ? AND is_current = 1 LIMIT 1;",
         ecu_serial_real);
 
@@ -1144,7 +1166,7 @@ bool SQLStorage::loadInstalledVersions(const std::string& ecu_serial, boost::opt
 
   if (pending_version != nullptr) {
     auto statement = db.prepareStatement<std::string>(
-        "SELECT sha256, name, hashes, length, correlation_id FROM installed_versions WHERE "
+        "SELECT sha256, name, hashes, length, correlation_id, custom_meta FROM installed_versions WHERE "
         "ecu_serial = ? AND is_pending = 1 LIMIT 1;",
         ecu_serial_real);
 
diff --git a/src/libaktualizr/storage/storage_common_test.cc b/src/libaktualizr/storage/storage_common_test.cc
index 2095387e..74a12f93 100644
--- a/src/libaktualizr/storage/storage_common_test.cc
+++ b/src/libaktualizr/storage/storage_common_test.cc
@@ -301,6 +301,10 @@ TEST(storage, load_store_installed_versions) {
   };
   Uptane::EcuMap primary_ecu{{Uptane::EcuSerial("primary"), Uptane::HardwareIdentifier("primary_hw")}};
   Uptane::Target t1{"update.bin", primary_ecu, hashes, 1, "corrid"};
+  Json::Value custom;
+  custom["version"] = 42;
+  custom["foo"] = "bar";
+  t1.updateCustom(custom);
   storage->savePrimaryInstalledVersion(t1, InstalledVersionUpdateMode::kCurrent);
   {
     std::vector<Uptane::Target> log;
@@ -324,6 +328,8 @@ TEST(storage, load_store_installed_versions) {
     EXPECT_EQ(current->ecus(), primary_ecu);
     EXPECT_EQ(current->correlation_id(), "corrid");
     EXPECT_EQ(current->length(), 1);
+    EXPECT_EQ(current->custom_data()["foo"], "bar");
+    EXPECT_EQ(current->custom_data()["version"], 42);
   }
 
   // Set t2 as a pending version
@@ -391,6 +397,7 @@ TEST(storage, load_store_installed_versions) {
     storage->loadInstallationLog("primary", &log, true);
     EXPECT_EQ(log.size(), 4);
     EXPECT_EQ(log.back().filename(), "update3.bin");
+    EXPECT_EQ(log[0].custom_data()["foo"], "bar");
   }
 
   // Add a secondary installed version
diff --git a/src/libaktualizr/uptane/tuf.h b/src/libaktualizr/uptane/tuf.h
index 944780d6..38e7cf74 100644
--- a/src/libaktualizr/uptane/tuf.h
+++ b/src/libaktualizr/uptane/tuf.h
@@ -240,6 +240,7 @@ class Target {
   std::vector<HardwareIdentifier> hardwareIds() const { return hwids_; };
   std::string custom_version() const { return custom_["version"].asString(); }
   Json::Value custom_data() const { return custom_; }
+  void updateCustom(Json::Value &custom) { custom_ = custom; };
   std::string correlation_id() const { return correlation_id_; };
   void setCorrelationId(std::string correlation_id) { correlation_id_ = std::move(correlation_id); };
   uint64_t length() const { return length_; }
-- 
2.23.0

