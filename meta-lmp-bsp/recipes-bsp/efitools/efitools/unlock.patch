From 7d098353efaf7b6f9e2a4b914d8b13146c25526f Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Thu, 3 Oct 2024 09:17:11 +0200
Subject: [PATCH] UnLock: unprovision secure boot

Disactivate secure boot by clearing PK.

Upstream-status: Inactive-Upstream [ v1.9.2: 2019-01-08 ]

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
---
 Makefile |  18 ++++++++-
 UnLock.c | 110 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 126 insertions(+), 2 deletions(-)
 create mode 100644 UnLock.c

diff --git a/Makefile b/Makefile
index ede2bf9..43aa26b 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,4 @@
-EFIFILES = LockDown.efi
+EFIFILES = LockDown.efi UnLock.efi
 BINARIES = cert-to-efi-sig-list sig-list-to-certs sign-efi-sig-list \
 	hash-to-efi-sig-list efi-readvar efi-updatevar cert-to-efi-hash-list \
 	flash-var
@@ -50,9 +50,14 @@ lib/asn1/libasn1.a lib/asn1/libasn1-efi.a: FORCE
 .KEEP: PK.crt KEK.crt DB.crt DBX.crt PK.key KEK.key DB.key PK.esl DB.esl KEK.esl DBX.esl \
 	$(EFIFILES)
 
+UnLock.o: noPK.h noKEK.h
 LockDown.o: PK.h KEK.h DB.h DBX.h
 PreLoader.o: hashlist.h
 
+noPK.h: noPK.auth
+
+noKEK.h: noKEK.auth
+
 PK.h: PK.auth
 
 KEK.h: KEK.auth
@@ -64,9 +69,17 @@ DBX.h: DBX.auth
 noPK.esl:
 	> noPK.esl
 
+noKEK.esl:
+	> noKEK.esl
+
+ifneq ($(USE_LOCAL_AUTHS),1)
 noPK.auth: noPK.esl PK.crt sign-efi-sig-list
 	$(SIGN_EFI_SIG_LIST) -t "$(shell date --date='1 second' +'%Y-%m-%d %H:%M:%S')" -c PK.crt -k PK.key PK $< $@
 
+noKEK.auth: noKEK.esl KEK.crt sign-efi-sig-list
+	$(SIGN_EFI_SIG_LIST) -t "$(shell date --date='1 second' +'%Y-%m-%d %H:%M:%S')" -c KEK.crt -k KEK.key KEK $< $@
+endif
+
 ms-%.esl: ms-%.crt cert-to-efi-sig-list
 	$(CERT_TO_EFI_SIG_LIST) -g $(MSGUID) $< $@
 
@@ -80,6 +93,7 @@ Loader.so: lib/lib-efi.a
 ReadVars.so: lib/lib-efi.a lib/asn1/libasn1-efi.a
 UpdateVars.so: lib/lib-efi.a
 LockDown.so: lib/lib-efi.a
+UnLock.so: lib/lib-efi.a
 KeyTool.so: lib/lib-efi.a lib/asn1/libasn1-efi.a
 HashTool.so: lib/lib-efi.a
 PreLoader.so: lib/lib-efi.a
@@ -115,7 +129,7 @@ flash-var: flash-var.o lib/lib.a
 
 clean:
 	rm -f PK.* KEK.* DB.* DBX.* $(EFIFILES) $(EFISIGNED) $(BINARIES) *.o *.so
-	rm -f noPK.*
+	rm -f noPK.* noKEK.*
 	rm -f doc/*.1
 	$(MAKE) -C lib clean
 	$(MAKE) -C lib/asn1 clean
diff --git a/UnLock.c b/UnLock.c
new file mode 100644
index 0000000..0b52328
--- /dev/null
+++ b/UnLock.c
@@ -0,0 +1,110 @@
+/*
+ * Copyright (c) 2024 Foundries.io
+ *
+ * Author: Jorge Ramirez-Ortiz <jorge@foundries.io>
+ *
+ * see COPYING file
+ */
+#include <efi.h>
+#include <efilib.h>
+
+#include <variables.h>
+#include <guid.h>
+
+#include "noKEK.h"
+#include "noPK.h"
+
+#define CHECK_EFI_STATUS(efi_status, cert) \
+    if (efi_status != EFI_SUCCESS) \
+        Print(L"Failed to clear %s: %d\n", cert, efi_status); \
+    else \
+        Print(L"%s cleared\n", cert);
+
+#define CHECK_EFI_MODE(efi_status, mode, val) \
+    if (efi_status != EFI_SUCCESS) \
+	Print(L"No %s variable\n", mode); \
+    else \
+	Print(L"Platform is %sin %s\n", val ? L"" :L"not ", mode);
+
+
+EFI_STATUS show_mode()
+{
+	EFI_STATUS efi_status;
+	UINT8 SecureBoot, SetupMode;
+	UINTN DataSize = sizeof(SetupMode);
+
+	efi_status = RT->GetVariable(L"SetupMode", &GV_GUID, NULL, &DataSize,
+				     &SetupMode);
+	CHECK_EFI_MODE(efi_status, L"SetupMode", SetupMode);
+
+
+	efi_status = RT->GetVariable(L"SecureBoot", &GV_GUID, NULL, &DataSize,
+				     &SecureBoot);
+	CHECK_EFI_MODE(efi_status, L"SecureBoot", SecureBoot);
+
+	return EFI_SUCCESS;
+}
+
+EFI_STATUS clear_certificates(void)
+{
+	EFI_STATUS efi_status, ret;
+
+	show_mode();
+
+	efi_status = RT->SetVariable(L"PK", &GV_GUID,
+				     EFI_VARIABLE_NON_VOLATILE
+				     | EFI_VARIABLE_RUNTIME_ACCESS
+				     | EFI_VARIABLE_BOOTSERVICE_ACCESS
+				     | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS,
+				     noPK_auth_len, noPK_auth);
+	CHECK_EFI_STATUS(efi_status, L"PK");
+	ret = efi_status;
+
+	efi_status = RT->SetVariable(L"KEK", &GV_GUID,
+				     EFI_VARIABLE_NON_VOLATILE
+				     | EFI_VARIABLE_RUNTIME_ACCESS
+				     | EFI_VARIABLE_BOOTSERVICE_ACCESS
+				     | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS,
+				     noPK_auth_len, noPK_auth);
+	CHECK_EFI_STATUS(efi_status, L"KEK");
+	ret |= efi_status;
+
+	efi_status = RT->SetVariable(L"db", &SIG_DB,
+				     EFI_VARIABLE_NON_VOLATILE
+				     | EFI_VARIABLE_RUNTIME_ACCESS
+				     | EFI_VARIABLE_BOOTSERVICE_ACCESS
+				     | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS,
+				     noKEK_auth_len, noKEK_auth);
+	CHECK_EFI_STATUS(efi_status, L"db");
+	ret |= efi_status;
+
+	efi_status = RT->SetVariable(L"dbx", &SIG_DB,
+				     EFI_VARIABLE_NON_VOLATILE
+				     | EFI_VARIABLE_RUNTIME_ACCESS
+				     | EFI_VARIABLE_BOOTSERVICE_ACCESS
+				     | EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS,
+				     noKEK_auth_len, noKEK_auth);
+	CHECK_EFI_STATUS(efi_status, L"dbx");
+	ret |= efi_status;
+
+	show_mode();
+
+	return ret != EFI_SUCCESS ? EFI_SECURITY_VIOLATION : EFI_SUCCESS;
+}
+
+
+EFI_STATUS efi_main (EFI_HANDLE image, EFI_SYSTEM_TABLE *systab)
+{
+	EFI_STATUS efi_status;
+
+	InitializeLib(image, systab);
+
+	efi_status = clear_certificates();
+
+	if (efi_status == EFI_SUCCESS) {
+		BS->Stall(3000000);
+		RT->ResetSystem(EfiResetWarm, EFI_SUCCESS, 0, NULL);
+	}
+
+	return efi_status;
+}
-- 
2.34.1

