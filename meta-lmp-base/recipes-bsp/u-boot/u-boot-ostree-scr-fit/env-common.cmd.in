# common boot handlers
setenv fio_msg "FIO:"
setenv ostree_split_boot "@@OSTREE_SPLIT_BOOT@@"
setenv ostree_deploy_usr "@@OSTREE_DEPLOY_USR_OSTREE_BOOT@@"

# uEnv handling
setenv bootcmd_resetvars 'setenv kernel_image; setenv bootdir; setenv bootargs; setenv kernel_image2; setenv bootdir2; setenv bootargs2'
setenv bootcmd_ostree_bootpart 'if test "${ostree_split_boot}" = "1"; then setenv ostree_bootpart "${bootpart}"; else setenv ostree_bootpart "${rootpart}"; fi'
setenv bootcmd_otenv 'run bootcmd_resetvars; ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} /boot/loader/uEnv.txt; env import -t ${loadaddr} ${filesize} kernel_image bootdir bootargs kernel_image2 bootdir2 bootargs2'
setenv bootcmd_bootenv 'setenv bootfirmware_version; if test "${ostree_deploy_usr}" = "1"; then ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} ${bootdir}/version.txt; else ext4load ${devtype} ${devnum}:${rootpart} ${loadaddr} ${ostree_root}/usr/lib/firmware/version.txt; fi; env import -t ${loadaddr} ${filesize} bootfirmware_version'
setenv bootcmd_getroot 'setexpr ostree_root gsub "^.*ostree=([^ ]*).*$" "\\\\1" "${bootargs}"'

# Env saving
setenv saveenv_mmc 'if test -z "${fiovb_rpmb}"; then saveenv; fi;'

# Import uEnv.txt
run bootcmd_ostree_bootpart
run bootcmd_otenv
# Get deployment sysroot absolute path
run bootcmd_getroot
# Check if board is on closed state
run check_board_closed

# Device what storage we should use for update-related vars
# If board is closed and has eMMC - use RPMB
# If board is open - use uboot environment
if fiovb init ${devnum} && test -n "${board_is_closed}"; then
	echo "${fio_msg} using fiovb"
	setenv fiovb_rpmb 1;

	# FIO bootcount, upgrade_available and rollback initialization
	mmc rescan

	fiovb read_pvalue bootcount 4
	if test ! $? -eq 0; then fiovb write_pvalue bootcount 0; fi
	fiovb read_pvalue rollback 4
	if test ! $? -eq 0; then fiovb write_pvalue rollback 0; fi
	fiovb read_pvalue upgrade_available 4
	if test ! $? -eq 0; then fiovb write_pvalue upgrade_available 0; fi
	fiovb read_pvalue bootupgrade_available 4
	if test ! $? -eq 0; then fiovb write_pvalue bootupgrade_available 0; fi
	fiovb read_pvalue bootfirmware_version 128
	if test ! $? -eq 0; then run bootcmd_bootenv; fiovb write_pvalue bootfirmware_version "${bootfirmware_version}"; fi
	fiovb read_pvalue debug 4
	if test ! $? -eq 0; then fiovb write_pvalue debug 0; fi
	fiovb read_pvalue is_secondary_boot 4
	if test ! $? -eq 0; then fiovb write_pvalue is_secondary_boot 0; fi
else
	echo "${fio_msg} Using ubootenv"
	# Make sure initial environment is valid
	if test -z "${bootcount}"; then setenv bootcount 0; setenv envsave 1; fi
	if test -z "${rollback}"; then setenv rollback 0; setenv envsave 1; fi
	if test -z "${upgrade_available}"; then setenv upgrade_available 0; setenv envsave 1; fi
	if test -z "${bootupgrade_available}"; then setenv bootupgrade_available 0; setenv envsave 1; fi
	if test -z "${debug}"; then setenv debug 0; setenv envsave 1; fi
	if test -z "${bootfirmware_version}"; then run bootcmd_bootenv; setenv envsave 1; fi
	# Call saveenv if not yet set (e.g. first boot after clean flash)
	if test "${envsave}" = "1"; then setenv envsave; run saveenv_mmc; fi

	setenv fiovb.bootcount "${bootcount}"
	setenv fiovb.rollback "${rollback}"
	setenv fiovb.upgrade_available "${upgrade_available}"
	setenv fiovb.bootupgrade_available "${bootupgrade_available}"
	setenv fiovb.debug "${debug}"
fi

if test "${fiovb.debug}" = "1"; then
	echo "${fio_msg} ################ Debug info ###############"
	echo "${fio_msg} State machine variables:"
	echo "${fio_msg} fiovb.bootcount = ${fiovb.bootcount}"
	echo "${fio_msg} fiovb.rollback = ${fiovb.rollback}"
	echo "${fio_msg} fiovb.upgrade_available = ${fiovb.upgrade_available}"
	echo "${fio_msg} fiovb.bootupgrade_available = ${fiovb.bootupgrade_available}"
	echo "${fio_msg} fiovb.is_secondary_boot = ${fiovb.is_secondary_boot}"
	echo "${fio_msg} bootfirmware_version = ${bootfirmware_version}"
	echo "${fio_msg}"
	echo "${fio_msg} Other variables:"
	echo "${fio_msg} ostree deploy usr = ${ostree_deploy_usr}"
	echo "${fio_msg} ostree split boot = ${ostree_split_boot}"
	echo "${fio_msg} ostree boot dir = ${bootdir}"
	echo "${fio_msg} ostree root path = ${ostree_root}"
	echo "${fio_msg} bootloader_image_update = ${bootloader_image_update}"
	echo "${fio_msg} bootloader_s_image_update = ${bootloader_s_image_update}"
	echo "${fio_msg} bootloader2_image_update = ${bootloader2_image_update}"
	echo "${fio_msg} bootloader2_s_image_update = ${bootloader2_s_image_update}"
	echo "${fio_msg} set_primary_boot = ${set_primary_boot}"
	echo "${fio_msg} set_secondary_boot = ${set_secondary_boot}"
	echo "${fio_msg} update_primary_image = ${update_primary_image}"
	echo "${fio_msg} update_secondary_image = ${update_secondary_image}"
	echo "${fio_msg} update_primary_image2 = ${update_primary_image2}"
	echo "${fio_msg} update_secondary_image2 = ${update_secondary_image2}"
	echo "${fio_msg} ###########################################"
fi

setenv fiovb.old_is_secondary_boot ${fiovb.is_secondary_boot}
# Check state of SECONDARY_BOOT bit
run check_secondary_boot

# Check if we store correct secondary boot value in ubootenv/fiovb storage
# if not - we should update it
if test ! "${fiovb.is_secondary_boot}" = "${fiovb.old_is_secondary_boot}"; then
	# Save fiovb.is_secondary_boot state for allowing userspace
	# to easily identify the boot mode via environment
	if test -z "${fiovb_rpmb}"; then
		run saveenv_mmc
	else
		fiovb write_pvalue is_secondary_boot "${fiovb.is_secondary_boot}";
	fi
fi
