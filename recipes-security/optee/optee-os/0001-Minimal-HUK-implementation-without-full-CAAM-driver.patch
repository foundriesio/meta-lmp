From 33f1991160fe3e1083add6f619324dfcedf5773f Mon Sep 17 00:00:00 2001
From: Rouven Czerwinski <r.czerwinski@pengutronix.de>
Date: Thu, 1 Aug 2019 14:56:48 +0200
Subject: [PATCH] Minimal HUK implementation without full CAAM driver

From pull-request https://github.com/OP-TEE/optee_os/pull/3160

imx: enable CAAM clocks before accessing registers

The CAAM clocks need to be enabled, otherwise access to the CAAM might
result in a bus stall.

Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>

plat-imx: pack caam structs

Add __attribute__((packed)) to the CAAM struct definitions to ensure the
compiler does not insert padding into the structures.

Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>

plat-imx: register definitions for CAAM

Register Definitions in the same style as used by the jobring allocation
code, by extending the structure definitions and inserting padding if
the registers are undocumented.

Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>

imx_caam: implement tee_otp_get_hw_unique_key

Minimal implementation for tee_otp_get_hw_unique_key using the Master
Key Verification Blob (MKVB) produced by the CAAM. Only the first 16
bytes are copied into the hw unique key structure, since the MKVB is 32
bytes long.

Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
Signed-off-by: Ricardo Salveti <ricardo@foundries.io>
---
 core/arch/arm/plat-imx/drivers/imx_caam.c | 141 ++++++++++++++++++++++
 core/arch/arm/plat-imx/drivers/imx_caam.h |  84 ++++++++++++-
 2 files changed, 224 insertions(+), 1 deletion(-)

diff --git a/core/arch/arm/plat-imx/drivers/imx_caam.c b/core/arch/arm/plat-imx/drivers/imx_caam.c
index 8d427f3c..322da060 100644
--- a/core/arch/arm/plat-imx/drivers/imx_caam.c
+++ b/core/arch/arm/plat-imx/drivers/imx_caam.c
@@ -9,9 +9,151 @@
 #include <initcall.h>
 #include <io.h>
 #include <mm/core_memprot.h>
+#include <imx.h>
+#include <imx-regs.h>
+#include <io.h>
+#include <kernel/generic_boot.h>
+#include <kernel/tee_common_otp.h>
+#include <mm/core_memprot.h>
+#include <platform_config.h>
+#include <stdint.h>
+#include <tee/cache.h>
 
 #include "imx_caam.h"
 
+static uint8_t stored_key[MKVB_SIZE];
+static bool mkvb_retrieved;
+
+static void caam_enable_clocks(void)
+{
+	vaddr_t ccm_base = core_mmu_get_va(CCM_BASE, MEM_AREA_IO_SEC);
+
+	io_setbits32(ccm_base + CCM_CCGR0,
+		     CCM_CCGR0_CAAM_WRAPPER_IPG  |
+		     CCM_CCGR0_CAAM_WRAPPER_ACLK |
+		     CCM_CCGR0_CAAM_SECURE_MEM);
+
+	if (soc_is_imx6dqp() || soc_is_imx6sdl() || soc_is_imx6dq())
+		io_setbits32(ccm_base + CCM_CCGR6,
+			     CCM_CCGR6_EMI_SLOW);
+}
+
+static TEE_Result imx_caam_reset_jr(struct imx_caam_ctrl *ctrl)
+{
+	uint32_t reg_val = 0;
+	uint32_t timeout = 1000;
+
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].jrcr, 1);
+	do {
+		reg_val = io_read32((vaddr_t)&ctrl->jrcfg[MKVB_JR].jrintr);
+		reg_val &= 0xc;
+	} while ((reg_val == 0x4) && --timeout);
+
+	if (!timeout)
+		return TEE_ERROR_SECURITY;
+
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].jrcr, 1);
+	do {
+		reg_val = io_read32((vaddr_t)&ctrl->jrcfg[MKVB_JR].jrintr);
+		reg_val &= 0xc;
+	} while ((reg_val & 0x1) && --timeout);
+
+	if (!timeout)
+		return TEE_ERROR_SECURITY;
+
+	return TEE_SUCCESS;
+}
+
+static TEE_Result mkvb_init_jr(struct imx_mkvb *mkvb)
+{
+	struct imx_caam_ctrl *ctrl = mkvb->ctrl;
+	TEE_Result ret = TEE_ERROR_SECURITY;
+
+	ret = imx_caam_reset_jr(ctrl);
+	if (ret)
+		return ret;
+
+	mkvb->njobs = 4;
+	io_write32((vaddr_t)&ctrl->jrstartr, MKVB_JR1_START);
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].irbar_ls,
+		   virt_to_phys(&mkvb->jr.inring));
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].irsr, mkvb->njobs);
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].orbar_ls,
+		   virt_to_phys(&mkvb->jr.outring));
+	io_write32((vaddr_t)&ctrl->jrcfg[MKVB_JR].orsr, mkvb->njobs);
+
+	return TEE_SUCCESS;
+}
+
+static TEE_Result caam_get_mkvb(uint8_t *dest)
+{
+	struct imx_mkvb mkvb = { 0 };
+	TEE_Result ret = TEE_ERROR_SECURITY;
+	paddr_t desc_paddr = 0;
+	int counter = 0;
+
+	mkvb.ctrl = (struct imx_caam_ctrl *)
+		core_mmu_get_va(CAAM_BASE, MEM_AREA_IO_SEC);
+
+	ret = mkvb_init_jr(&mkvb);
+	if (ret)
+		goto out;
+
+	mkvb.descriptor[0] = MKVB_DESC_HEADER;
+	mkvb.descriptor[1] = MKVB_DESC_SEQ_OUT;
+	mkvb.descriptor[2] = virt_to_phys(&mkvb.outbuf);
+	cache_operation(TEE_CACHEFLUSH, &mkvb.outbuf, MKVB_SIZE);
+	mkvb.descriptor[3] = MKVB_DESC_BLOB;
+	cache_operation(TEE_CACHEFLUSH, &mkvb.descriptor,
+			sizeof(mkvb.descriptor));
+
+	desc_paddr = virt_to_phys(&mkvb.descriptor);
+	memcpy(&mkvb.jr.inring, &desc_paddr, sizeof(desc_paddr));
+	cache_operation(TEE_CACHEFLUSH, &mkvb.jr,
+			sizeof(mkvb.jr.inring[0]));
+
+	/* Tell CAAM that one job is available */
+	io_write32((vaddr_t)&mkvb.ctrl->jrcfg[MKVB_JR].irjar, 1);
+
+	/* Busy loop until job is completed */
+	while (io_read32((vaddr_t)&mkvb.ctrl->jrcfg[MKVB_JR].orsfr) != 1) {
+		counter++;
+		if (counter > 10000) {
+			ret = TEE_ERROR_SECURITY;
+			goto out;
+		}
+	}
+
+	cache_operation(TEE_CACHEINVALIDATE, &mkvb.jr, sizeof(mkvb.jr));
+	cache_operation(TEE_CACHEINVALIDATE, &mkvb.outbuf, MKVB_SIZE);
+	DHEXDUMP(&mkvb.outbuf, MKVB_SIZE);
+
+	if (mkvb.jr.outring[0].status != 0) {
+		ret = TEE_ERROR_SECURITY;
+		goto out;
+	}
+
+	memcpy(dest, &mkvb.outbuf, MKVB_SIZE);
+	ret = TEE_SUCCESS;
+out:
+	io_write32((vaddr_t)&mkvb.ctrl->scfgr, PRIBLOB_11);
+	return ret;
+}
+
+TEE_Result tee_otp_get_hw_unique_key(struct tee_hw_unique_key *hwkey)
+{
+	int ret = TEE_ERROR_SECURITY;
+
+	if (!mkvb_retrieved) {
+		ret = caam_get_mkvb(stored_key);
+		if (ret)
+			return ret;
+		mkvb_retrieved = true;
+	}
+	memcpy(&hwkey->data, &stored_key, sizeof(hwkey->data));
+	return TEE_SUCCESS;
+}
+
 register_phys_mem_pgdir(MEM_AREA_IO_SEC, CAAM_BASE, CORE_MMU_PGDIR_SIZE);
 
 static TEE_Result init_caam(void)
@@ -25,6 +165,7 @@ static TEE_Result init_caam(void)
 	if (!caam)
 		return TEE_ERROR_GENERIC;
 
+	caam_enable_clocks();
 	/*
 	 * Set job-ring ownership to non-secure by default.
 	 * A Linux kernel that runs after OP-TEE will run in normal-world
diff --git a/core/arch/arm/plat-imx/drivers/imx_caam.h b/core/arch/arm/plat-imx/drivers/imx_caam.h
index 500da0db..be67122b 100644
--- a/core/arch/arm/plat-imx/drivers/imx_caam.h
+++ b/core/arch/arm/plat-imx/drivers/imx_caam.h
@@ -9,13 +9,15 @@
 #ifndef __IMX_CAAM_H__
 #define __IMX_CAAM_H__
 
+#include <compiler.h>
 #include <imx-regs.h>
 #include <stdint.h>
+#include <types_ext.h>
 
 struct imx_caam_job_ring {
 	uint32_t			jrmidr_ms;
 	uint32_t			jrmidr_ls;
-};
+} __packed;
 
 #define CAAM_NUM_JOB_RINGS		4
 
@@ -23,6 +25,63 @@ struct imx_caam_job_ring {
 #define JROWN_NS			BIT(3)
 #define JROWN_MID			0x01
 
+/* i.MX6 CAAM clocks bits  */
+#define CCM_CCGR0		0x0068
+#define CCM_CCGR6		0x0080
+
+#define CCM_CCGR0_CAAM_WRAPPER_IPG	SHIFT_U32(3, 12)
+#define CCM_CCGR0_CAAM_SECURE_MEM	SHIFT_U32(3, 8)
+#define CCM_CCGR0_CAAM_WRAPPER_ACLK	SHIFT_U32(3, 10)
+#define CCM_CCGR6_EMI_SLOW		SHIFT_U32(3, 10)
+
+/* Descriptor and MKVB Definitions */
+#define MKVB_SIZE			32
+#define MKVB_DESC_SEQ_OUT		0xf8000020
+#define MKVB_DESC_HEADER		0xb0800004
+#define MKVB_DESC_BLOB			0x870d0002
+
+/* PRIBLOB Bits */
+#define PRIBLOB_11			3
+
+/* JR Bits */
+#define MKVB_JR				1
+#define MKVB_JR1_START			2
+
+/* jr configuration registers */
+struct imx_caam_jr_ctrl {
+	uint32_t	irbar;
+	uint32_t	irbar_ls;
+	uint8_t		padding[4];
+	uint32_t	irsr;
+	uint8_t		padding2[4];
+	uint32_t	irsar;
+	uint8_t		padding3[4];
+	uint32_t	irjar;
+	uint32_t	orbar;
+	uint32_t	orbar_ls;
+	uint8_t		padding4[4];
+	uint32_t	orsr;
+	uint8_t		padding5[4];
+	uint32_t	orjrr;
+	uint8_t		padding6[4];
+	uint32_t	orsfr;
+	uint8_t		padding7[4];
+	uint32_t	jrstar;
+	uint8_t		padding8[4];
+	uint32_t	jrintr;
+	uint32_t	jrcfgr_ms;
+	uint32_t	jrcfgr_ls;
+	uint8_t		padding9[4];
+	uint32_t	irrir;
+	uint8_t		padding10[4];
+	uint32_t	orwir;
+	uint8_t		padding11[4];
+	uint32_t	jrcr;
+	uint8_t		padding12[1688];
+	uint32_t	jraav;
+	uint8_t		padding13[2292];
+} __packed;
+
 /* A basic sub-set of the CAAM */
 struct imx_caam_ctrl {
 	uint32_t			res0;
@@ -30,6 +89,29 @@ struct imx_caam_ctrl {
 	uint32_t			res1;
 	uint32_t			scfgr;
 	struct imx_caam_job_ring	jr[CAAM_NUM_JOB_RINGS];
+	uint8_t				padding[36];
+	uint32_t			debugctl;
+	uint32_t			jrstartr;
+	uint8_t				padding2[4004];
+	struct imx_caam_jr_ctrl		jrcfg[CAAM_NUM_JOB_RINGS];
+} __packed;
+
+#define MKVB_CL_SIZE	64
+
+struct imx_mkvb {
+	struct {
+		struct {
+			uint32_t desc;
+		} inring[8];
+		struct {
+			uint32_t desc;
+			uint32_t status;
+		} __packed outring[4];
+	} __packed __aligned(MKVB_CL_SIZE) jr;
+	uint32_t descriptor[16] __aligned(MKVB_CL_SIZE);
+	char outbuf[MKVB_CL_SIZE] __aligned(MKVB_CL_SIZE);
+	size_t njobs;
+	struct imx_caam_ctrl *ctrl;
 };
 
 #endif /* __IMX_CAAM_H__ */
-- 
2.23.0

