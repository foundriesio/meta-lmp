# common boot handlers
setenv fio_msg "FIO:"

# uEnv handling
setenv bootcmd_resetvars 'setenv kernel_image; setenv bootargs; setenv kernel_image2; setenv bootargs2'
setenv bootcmd_otenv 'run bootcmd_resetvars; ext4load ${devtype} ${devnum}:${rootpart} ${loadaddr} /boot/loader/uEnv.txt; env import -t ${loadaddr} ${filesize}'
setenv bootcmd_bootenv 'setenv bootfirmware_version; ext4load ${devtype} ${devnum}:2 ${loadaddr} ${ostree_root}/usr/lib/firmware/version.txt; env import -t ${loadaddr} ${filesize}'
setenv bootcmd_getroot 'setexpr ostree_root gsub "^.*ostree=([^ ]*).*$" "\\\\1" "${bootargs}"'

# Env saving
setenv saveenv_mmc 'if test -z "${fiovb_rpmb}"; then saveenv; fi;'

# Boot firmware update helpers
setenv rollback_setup 'if test -n "${fiovb_rpmb}"; then fiovb write_pvalue rollback 1; fiovb write_pvalue upgrade_available 0; fiovb write_pvalue bootupgrade_available 0; else setenv rollback 1; setenv upgrade_available 0; setenv bootupgrade_available 0; setenv fiovb.rollback "${rollback}"; setenv fiovb.upgrade_available "${upgrade_available}"; setenv fiovb.bootupgrade_available "${bootupgrade_available}"; fi;'
setenv load_image 'if ext4load ${devtype} ${devnum}:2 ${loadaddr} ${image_path}; then echo "${fio_msg} loaded ${image_path}"; else "${fio_msg} error occured while loading ${image_path}, scheduling rollback after reset ..."; run rollback_setup; run saveenv_mmc; imx_secondary_boot 0; reset; fi;'
setenv set_blkcnt 'setexpr blkcnt ${filesize} + 0x1ff && setexpr blkcnt ${blkcnt} / 0x200'
setenv update_image 'echo "${fio_msg} writing ${image_path} ..."; run set_blkcnt && mmc dev ${devnum} ${uboot_hwpart} && mmc write ${loadaddr} ${start_blk} ${blkcnt}'

if test -z "${bootcount}"; then
	setenv bootcount 0;
fi

# Import uEnv.txt
run bootcmd_otenv
# Get deployment sysroot absolute path
run bootcmd_getroot
# Check state of SECONDARY_BOOT bit
imx_secondary_boot
# Check if board is on closed state
imx_is_closed

# Device what storage we should use for update-related vars
# If board is closed and has eMMC - use RPMB
# If board is open - use uboot environment
if fiovb init ${devnum} && test -n "${board_is_closed}"; then
	echo "${fio_msg} using fiovb"
	setenv fiovb_rpmb 1;
else
	echo "${fio_msg} Using ubootenv"
	setenv fiovb.bootcount "${bootcount}"
	setenv fiovb.rollback "${rollback}"
	setenv fiovb.upgrade_available "${upgrade_available}"
	setenv fiovb.bootupgrade_available "${bootupgrade_available}"
fi

# Handle boot firmware updates
if test "${fiovb.is_secondary_boot}" = "0"; then
	if test -n "${fiovb_rpmb}"; then
		# FIO bootcount, upgrade_available and rollback initialization
		mmc rescan

		fiovb read_pvalue bootcount 4
		if test ! $? -eq 0; then fiovb write_pvalue bootcount 0; fi
		fiovb read_pvalue rollback 4
		if test ! $? -eq 0; then fiovb write_pvalue rollback 0; fi
		fiovb read_pvalue upgrade_available 4
		if test ! $? -eq 0; then fiovb write_pvalue upgrade_available 0; fi
		fiovb read_pvalue bootupgrade_available 4
		if test ! $? -eq 0; then fiovb write_pvalue bootupgrade_available 0; fi
	fi

	# Only update bootcount when upgrade_available is set
	if test "${fiovb.upgrade_available}" = "1"; then
		setexpr bootcount ${fiovb.bootcount} + 1;
		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootcount ${bootcount};
		else
			# just save env with updated bootcount value
			run saveenv_mmc
		fi;


		# If bootcount is above bootlimit, trigger rollback
		# if not - try to boot secondary boot path for boot firmware validation
		if test ${bootcount} -gt ${bootlimit}; then
			echo "${fio_msg} doing rollback..."

			run rollback_setup
			run saveenv_mmc
		else
			if test "${fiovb.bootupgrade_available}" = "1"; then
				imx_secondary_boot 1;
				echo "${fio_msg} updating secondary boot images from ${ostree_root} ..."

				setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader_s_image}"
				setenv start_blk "${bootloader_s}"
				run load_image
				run update_image

				setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader2_s_image}"
				setenv start_blk "${bootloader2_s}"
				run load_image
				run update_image

				run saveenv_mmc
				echo "${fio_msg} doing warm reset to boot into secondary boot path..."
				reset -w
			fi;
		fi
	fi

	# That means that we've validated already boot image over secondary path
	# So we can update stable primary path with that images
	if test "${fiovb.bootupgrade_available}" = "1" && test "${fiovb.upgrade_available}" = "0"; then
		echo "${fio_msg} update primary boot path with validated images ..."

		setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader_image}"
		setenv start_blk "${bootloader}"
		run load_image
		run update_image

		setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader2_image}"
		setenv start_blk "${bootloader2}"
		run load_image
		run update_image

		run bootcmd_bootenv
		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootupgrade_available 0;
			fiovb write_pvalue bootfirmware_version ${bootfirmware_version};
		else
			setenv bootupgrade_available 0;
		fi

		run saveenv_mmc
		echo "${fio_msg} reset ..."
		imx_secondary_boot 0
		reset
	fi
fi

setenv bootcmd_load_f 'ext4load ${devtype} ${devnum}:${rootpart} ${fit_addr} "/boot"${kernel_image}'
setenv bootcmd_tee_ovy 'if test -n ${optee_ovl_addr}; then imxtract ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} fdt@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fdt_addr}; fdt addr ${fdt_addr}; fdt resize 0x1000; fdt apply ${optee_ovl_addr}; fi'
setenv bootcmd_run 'if test -n ${optee_ovl_addr}; then bootm ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fdt_addr}; else echo "${fio_msg} loading ${fdt_file_final}"; bootm ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final}; fi'
setenv bootcmd_rollback 'if test -n "${kernel_image2}" && test "${fiovb.is_secondary_boot}" = "0" && test "${fiovb.rollback}" = "1"; then setenv kernel_image ${kernel_image2}; setenv bootargs ${bootargs2}; fi;'

run bootcmd_rollback
run bootcmd_load_f
run bootcmd_tee_ovy

# If we are validating secondary boot path, Linux should force reboot back to
# primary path after running reboot cmd (this is needed for boards without
# software POR reset support, like Apalis iMX6)
echo "${fiovb_msg} Forcing secondary boot to 0 after reboot"
imx_secondary_boot 0

run bootcmd_run

reset
