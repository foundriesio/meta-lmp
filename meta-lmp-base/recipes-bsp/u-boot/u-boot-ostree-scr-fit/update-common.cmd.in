@@INCLUDE_ENV_COMMON@@

# Boot firmware update helpers
setenv rollback_setup 'if test -n "${fiovb_rpmb}"; then fiovb write_pvalue rollback 1; fiovb write_pvalue upgrade_available 0; fiovb write_pvalue bootupgrade_available 0; else setenv rollback 1; setenv upgrade_available 0; setenv bootupgrade_available 0; setenv fiovb.rollback "${rollback}"; setenv fiovb.upgrade_available "${upgrade_available}"; setenv fiovb.bootupgrade_available "${bootupgrade_available}"; fi;'
setenv load_image 'if ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} ${image_path}; then echo "${fio_msg} loaded ${image_path}"; else echo "${fio_msg} error occured while loading ${image_path}, scheduling rollback after reset ..."; run rollback_setup; run saveenv_mmc; run set_primary_boot; reset; fi;'
setenv set_blkcnt 'setexpr blkcnt ${filesize} + 0x1ff && setexpr blkcnt ${blkcnt} / 0x200'

# Handle boot firmware updates
if test "${fiovb.is_secondary_boot}" = "0"; then
	# Only update bootcount when upgrade_available is set and boot mode is
	# primary since counting on secondary would double count on upgrades
	if test "${fiovb.upgrade_available}" = "1"; then
		setexpr bootcount ${fiovb.bootcount} + 1;
		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootcount ${bootcount};
		else
			# just save env with updated bootcount value
			run saveenv_mmc
		fi;


		# If bootcount is above bootlimit, trigger rollback
		# if not - try to boot secondary boot path for boot firmware validation
		if test ${bootcount} -gt ${bootlimit}; then
			echo "${fio_msg} doing rollback..."

			run rollback_setup
			run saveenv_mmc
			reset
		else
			if test "${fiovb.bootupgrade_available}" = "1"; then
				run set_secondary_boot;
				if test "${ostree_deploy_usr}" = "1"; then
					echo "${fio_msg} updating secondary boot images from ${bootdir} ..."

					setenv image_path "${bootdir}/${bootloader_s_image}"
					setenv start_blk "${bootloader_s}"
					run load_image
					run update_secondary_image

					setenv image_path "${bootdir}/${bootloader2_s_image}"
					setenv start_blk "${bootloader2_s}"
					run load_image
					run update_secondary_image2
				else
					echo "${fio_msg} updating secondary boot images from ${ostree_root} ..."

					setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader_s_image}"
					setenv start_blk "${bootloader_s}"
					run load_image
					run update_secondary_image

					setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader2_s_image}"
					setenv start_blk "${bootloader2_s}"
					run load_image
					run update_secondary_image2
				fi

				run saveenv_mmc
				echo "${fio_msg} doing warm reset to boot into secondary boot path..."
				reset -w
			fi;
		fi
	fi

	# That means that we've validated already boot image over secondary path
	# So we can update stable primary path with that images
	if test "${fiovb.bootupgrade_available}" = "1" && test "${fiovb.upgrade_available}" = "0"; then
		if test -z "${custom_apply_stable}"; then
			echo "${fio_msg} update primary boot path with validated images ..."
			if test "${ostree_deploy_usr}" = "1"; then
				setenv image_path "${bootdir}/${bootloader_image}"
				setenv start_blk "${bootloader}"
				run load_image
				run update_primary_image

				setenv image_path "${bootdir}/${bootloader2_image}"
				setenv start_blk "${bootloader2}"
				run load_image
				run update_primary_image2
			else
				setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader_image}"
				setenv start_blk "${bootloader}"
				run load_image
				run update_primary_image

				setenv image_path "${ostree_root}/usr/lib/firmware/${bootloader2_image}"
				setenv start_blk "${bootloader2}"
				run load_image
				run update_primary_image2
			fi
			run set_primary_boot
		else
			run custom_apply_stable
		fi

		run bootcmd_bootenv

		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootupgrade_available 0;
			fiovb write_pvalue bootfirmware_version "${bootfirmware_version}";
		else
			setenv bootupgrade_available 0;
			setenv bootfirmware_version "${bootfirmware_version}";
		fi

		run saveenv_mmc
		echo "${fio_msg} reset ..."
		reset
	fi
fi

reset
