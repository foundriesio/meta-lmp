# common boot handlers
setenv fio_msg "FIO:"
setenv ostree_split_boot "@@OSTREE_SPLIT_BOOT@@"
setenv ostree_deploy_usr "@@OSTREE_DEPLOY_USR_OSTREE_BOOT@@"

# uEnv handling
setenv bootcmd_resetvars 'setenv kernel_image; setenv bootdir; setenv bootargs; setenv kernel_image2; setenv bootdir2; setenv bootargs2'
setenv bootcmd_ostree_bootpart 'if test "${ostree_split_boot}" = "1"; then setenv ostree_bootpart "${bootpart}"; else setenv ostree_bootpart "${rootpart}"; fi'
setenv bootcmd_otenv 'run bootcmd_resetvars; ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} /boot/loader/uEnv.txt; env import -t ${loadaddr} ${filesize} kernel_image bootdir bootargs kernel_image2 bootdir2 bootargs2'
setenv bootcmd_bootenv 'setenv bootfirmware_version; if test "${ostree_deploy_usr}" = "1"; then ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} ${bootdir}/version.txt; else ext4load ${devtype} ${devnum}:${rootpart} ${loadaddr} ${ostree_root}/usr/lib/firmware/version.txt; fi; env import -t ${loadaddr} ${filesize} bootfirmware_version'
setenv bootcmd_getroot 'setexpr ostree_root gsub "^.*ostree=([^ ]*).*$" "\\\\1" "${bootargs}"'

# Env saving
setenv saveenv_mmc 'if test -z "${fiovb_rpmb}"; then saveenv; fi;'

# Boot firmware update helpers
setenv rollback_setup 'if test -n "${fiovb_rpmb}"; then fiovb write_pvalue rollback 1; fiovb write_pvalue upgrade_available 0; fiovb write_pvalue bootupgrade_available 0; fiovb write_pvalue bootupgrade_primary_updated 0; else setenv rollback 1; setenv upgrade_available 0; setenv bootupgrade_available 0; setenv bootupgrade_primary_updated 0; setenv fiovb.rollback "${rollback}"; setenv fiovb.upgrade_available "${upgrade_available}"; setenv fiovb.bootupgrade_available "${bootupgrade_available}"; setenv fiovb.bootupgrade_primary_updated "${bootupgrade_primary_updated}"; fi;'
setenv load_image 'if ext4load ${devtype} ${devnum}:${ostree_bootpart} ${loadaddr} ${image_path}; then echo "${fio_msg} loaded ${image_path}"; else echo "${fio_msg} error occured while loading ${image_path}, scheduling rollback after reset ..."; run rollback_setup; run saveenv_mmc; run do_reboot; fi;'
setenv set_blkcnt 'setexpr blkcnt ${filesize} + 0x1ff && setexpr blkcnt ${blkcnt} / 0x200'

# Import uEnv.txt
run bootcmd_ostree_bootpart
run bootcmd_otenv
# Get deployment sysroot absolute path
run bootcmd_getroot
# Check if board is on closed state
run check_board_closed

# Booting handling
setenv bootcmd_load_f 'ext4load ${devtype} ${devnum}:${ostree_bootpart} ${fit_addr} "/boot"${kernel_image}'
setenv bootcmd_bootargs_add_root 'setenv bootargs "${bootargs} root=/dev/mmcblk${devnum}p${rootpart}"'
setenv bootcmd_tee_ovy 'if test -n ${optee_ovl_addr}; then imxtract ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} fdt@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fdt_addr}; fdt addr ${fdt_addr}; fdt resize 0x1000; fdt apply ${optee_ovl_addr}; fi'
if test -z "${bootcmd_custom_run}"; then setenv bootcmd_run 'if test -n ${optee_ovl_addr}; then bootm ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final} ${fdt_addr}; else echo "${fio_msg} loading ${fdt_file_final}"; bootm ${fit_addr}#conf@@FIT_NODE_SEPARATOR@@${fdt_file_final}; fi'; else setenv bootcmd_run ${bootcmd_custom_run}; setenv bootcmd_custom_run; fi
setenv bootcmd_rollback 'if test -n "${kernel_image2}" && test "${fiovb.is_secondary_boot}" = "0" && test "${fiovb.rollback}" = "1"; then setenv kernel_image "${kernel_image2}"; setenv bootdir "${bootdir2}"; setenv bootargs "${bootargs2}"; fi;'

# Device what storage we should use for update-related vars
# If board is closed and has eMMC - use RPMB
# If board is open - use uboot environment
if fiovb init ${devnum} && test -n "${board_is_closed}"; then
	echo "${fio_msg} using fiovb"
	setenv fiovb_rpmb 1;

	# FIO bootcount, upgrade_available and rollback initialization
	mmc rescan

	fiovb read_pvalue bootcount 4
	if test ! $? -eq 0; then fiovb write_pvalue bootcount 0; fi
	fiovb read_pvalue rollback 4
	if test ! $? -eq 0; then fiovb write_pvalue rollback 0; fi
	fiovb read_pvalue upgrade_available 4
	if test ! $? -eq 0; then fiovb write_pvalue upgrade_available 0; fi
	fiovb read_pvalue bootupgrade_available 4
	if test ! $? -eq 0; then fiovb write_pvalue bootupgrade_available 0; fi
	fiovb read_pvalue bootupgrade_primary_updated 4
	if test ! $? -eq 0; then fiovb write_pvalue bootupgrade_primary_updated 0; fi
	fiovb read_pvalue bootfirmware_version 128
	if test ! $? -eq 0; then run bootcmd_bootenv; fiovb write_pvalue bootfirmware_version "${bootfirmware_version}"; fi
	fiovb read_pvalue debug 4
	if test ! $? -eq 0; then fiovb write_pvalue debug 0; fi
	fiovb read_pvalue is_secondary_boot 4
	if test ! $? -eq 0; then fiovb write_pvalue is_secondary_boot 0; fi

	# Try to read rollback-protection variable, but don't write, as this is OTP value
	fiovb read_pvalue rollback_protection 4
else
	echo "${fio_msg} Using ubootenv"
	# Make sure initial environment is valid
	if test -z "${bootcount}"; then setenv bootcount 0; setenv envsave 1; fi
	if test -z "${rollback}"; then setenv rollback 0; setenv envsave 1; fi
	if test -z "${rollback_protection}"; then setenv rollback_protection 0; setenv envsave 1; fi
	if test -z "${upgrade_available}"; then setenv upgrade_available 0; setenv envsave 1; fi
	if test -z "${bootupgrade_available}"; then setenv bootupgrade_available 0; setenv envsave 1; fi
	if test -z "${bootupgrade_primary_updated}"; then setenv bootupgrade_primary_updated 0; setenv envsave 1; fi
	if test -z "${debug}"; then setenv debug 0; setenv envsave 1; fi
	if test -z "${bootfirmware_version}"; then run bootcmd_bootenv; setenv envsave 1; fi
	# Call saveenv if not yet set (e.g. first boot after clean flash)
	if test "${envsave}" = "1"; then setenv envsave; run saveenv_mmc; fi

	setenv fiovb.bootcount "${bootcount}"
	setenv fiovb.rollback "${rollback}"
	setenv fiovb.rollback_protection "${rollback_protection}"
	setenv fiovb.upgrade_available "${upgrade_available}"
	setenv fiovb.bootupgrade_available "${bootupgrade_available}"
	setenv fiovb.bootupgrade_primary_updated "${bootupgrade_primary_updated}"
	setenv fiovb.bootfirmware_version "${bootfirmware_version}"
	setenv fiovb.debug "${debug}"
fi

if test "${fiovb.debug}" = "1"; then
	echo "${fio_msg} ################ Debug info ###############"
	echo "${fio_msg} State machine variables:"
	echo "${fio_msg} fiovb.is_secondary_boot = ${fiovb.is_secondary_boot}"
	echo "${fio_msg} fiovb.bootcount = ${fiovb.bootcount}"
	echo "${fio_msg} fiovb.rollback = ${fiovb.rollback}"
	echo "${fio_msg} fiovb.rollback_protection = ${fiovb.rollback_protection}"
	echo "${fio_msg} fiovb.upgrade_available = ${fiovb.upgrade_available}"
	echo "${fio_msg} fiovb.bootupgrade_available = ${fiovb.bootupgrade_available}"
	echo "${fio_msg} fiovb.bootupgrade_primary_updated = ${fiovb.bootupgrade_primary_updated}"
	echo "${fio_msg} bootfirmware_version = ${bootfirmware_version}"
	echo "${fio_msg}"
	echo "${fio_msg} Other variables:"
	echo "${fio_msg} ostree deploy usr = ${ostree_deploy_usr}"
	echo "${fio_msg} ostree split boot = ${ostree_split_boot}"
	echo "${fio_msg} ostree boot dir = ${bootdir}"
	echo "${fio_msg} ostree root path = ${ostree_root}"
	echo "${fio_msg} primary boot image offset = ${bootloader}"
	echo "${fio_msg} primary FIT offset = ${bootloader2}"
	echo "${fio_msg} secondary boot image offset = ${bootloader_s}"
	echo "${fio_msg} secondary FIT offset = ${bootloader2_s}"
	echo "${fio_msg} ###########################################"
fi

if test "${fiovb.rollback_protection}" = "1"; then
	if test -z "${dt_bootfirmware_version}"; then
		echo "${fio_msg} Error: Runtime boot firmware version is not available"
		sleep 5
		reset
	fi

	echo "${fio_msg} Anti-rollback protection for boot firmware is enabled"
	if test ${fiovb.bootfirmware_version} -gt ${dt_bootfirmware_version}; then
		echo "${fio_msg} Error: It is impossible to downgrade to an older firmware, boot is aborted"
		echo "${fio_msg} Error: Currently booted firmware: ${dt_bootfirmware_version}, previously booted: ${fiovb.bootfirmware_version}"
		sleep 5
		reset
	fi
fi

# Check state of SECONDARY_BOOT bit
setenv fiovb.old_is_secondary_boot ${fiovb.is_secondary_boot}
run check_secondary_boot

# Check if we store correct secondary boot value in ubootenv/fiovb storage
# if not - we should update it
if test ! "${fiovb.is_secondary_boot}" = "${fiovb.old_is_secondary_boot}"; then
	# Save fiovb.is_secondary_boot state for allowing userspace
	# to easily identify the boot mode via environment
	if test -z "${fiovb_rpmb}"; then
		run saveenv_mmc
	else
		fiovb write_pvalue is_secondary_boot "${fiovb.is_secondary_boot}";
	fi
fi

# Handle boot firmware updates
if test "${fiovb.is_secondary_boot}" = "0"; then
	# Only update bootcount when upgrade_available is set and boot mode is
	# primary since counting on secondary would double count on upgrades
	if test "${fiovb.upgrade_available}" = "1"; then
		setexpr bootcount ${fiovb.bootcount} + 1;
		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootcount ${bootcount};
		else
			# just save env with updated bootcount value
			run saveenv_mmc
		fi;


		# If bootcount is above bootlimit, trigger rollback
		# if not - try to boot secondary boot path for boot firmware validation
		if test ${bootcount} -gt ${bootlimit}; then
			echo "${fio_msg} doing rollback..."

			# check if boot firmware was also updated so we need
			# to restore it and boot old firmware after reset
			# and continue rollback process
			if test "${fiovb.bootupgrade_primary_updated}" = "1"; then
				run restore_primary_image
				run rollback_setup
				run saveenv_mmc
				run do_reboot
			else
				run rollback_setup
				run saveenv_mmc
			fi

		else
			# we haven't updated primary boot image yet
			if test "${fiovb.bootupgrade_available}" = "1" && test "${fiovb.bootupgrade_primary_updated}" = "0"; then
				run backup_primary_image
				echo "${fio_msg} updating primary boot images from ${ostree_root} ..."

				run update_primary_image

				if test -n "${fiovb_rpmb}"; then
					fiovb write_pvalue bootupgrade_primary_updated 1;
				else
					setenv bootupgrade_primary_updated 1;
				fi

				run saveenv_mmc

				echo "${fio_msg} doing reset to boot newly updated images..."
				run do_reboot
			fi;
		fi
	else

		# Handle case, when bootupgrade_available is mistakenly set (manually using fiovb/ubootenv)
		# and this prevents aklite to start new update
		if test "${fiovb.bootupgrade_primary_updated}" = "0" && test "${fiovb.bootupgrade_available}" = "1"; then
			if test -n "${fiovb_rpmb}"; then
				fiovb write_pvalue bootupgrade_available 0;
			else
				setenv bootupgrade_available 0;
			fi
			run saveenv_mmc
		fi

		# That means that ak-lite confirmed successful boot, so we can now reset
		# fiovb.bootupgrade_available variable, confirming that everything is ok
		# about boot firmware
		if test "${fiovb.bootupgrade_primary_updated}" = "1"; then
			echo "${fio_msg} finishing boot firmware update..."
			run bootcmd_bootenv
			if test -n "${fiovb_rpmb}"; then
				fiovb write_pvalue bootupgrade_available 0;
				fiovb write_pvalue bootupgrade_primary_updated 0;
				fiovb write_pvalue bootfirmware_version "${bootfirmware_version}";
			else
				setenv bootupgrade_available 0;
				setenv bootupgrade_primary_updated 0;
				setenv bootfirmware_version "${bootfirmware_version}";
			fi
			run saveenv_mmc
		fi
	fi

else
	# Handle the case if we booted secondary boot image set,
	# which means that the primary set is broken (for example, boot0 is corrupted)
	# and it became corrupted after update, which means
	# that we should rollback also
	if test "${fiovb.upgrade_available}" = "1"; then
			run rollback_setup
			run saveenv_mmc
	fi
	run restore_primary_image
	run do_reboot
fi

run bootcmd_rollback
run bootcmd_bootargs_add_root
run bootcmd_load_f
run bootcmd_tee_ovy
if test -n "${bootcmd_load_fw}"; then
	run bootcmd_load_fw
fi

run bootcmd_run

reset
