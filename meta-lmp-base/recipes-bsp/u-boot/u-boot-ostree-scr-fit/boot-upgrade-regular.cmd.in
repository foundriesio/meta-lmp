@@INCLUDE_COMMON_HEADER@@
# Handle boot firmware updates
if test "${fiovb.is_secondary_boot}" = "0"; then
	# Only update bootcount when upgrade_available is set and boot mode is
	# primary since counting on secondary would double count on upgrades
	if test "${fiovb.upgrade_available}" = "1"; then
		setexpr bootcount ${fiovb.bootcount} + 1;
		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootcount ${bootcount};
		else
			# just save env with updated bootcount value
			run saveenv_mmc
		fi;


		# If bootcount is above bootlimit, trigger rollback
		# if not - try to boot secondary boot path for boot firmware validation
		if test ${bootcount} -gt ${bootlimit}; then
			echo "${fio_msg} doing rollback..."

			run rollback_setup
			run saveenv_mmc
		else
			if test "${fiovb.bootupgrade_available}" = "1"; then
				run set_secondary_boot;
				echo "${fio_msg} updating secondary boot images from ${image_dir_path} ..."

				setenv image_path "${image_dir_path}/${bootloader_s_image}"
				setenv start_blk "${bootloader_s}"
				run load_image
				run update_secondary_image

				setenv image_path "${image_dir_path}/${bootloader2_s_image}"
				setenv start_blk "${bootloader2_s}"
				run load_image
				run update_secondary_image2

				run saveenv_mmc
				echo "${fio_msg} doing warm reset to boot into secondary boot path..."
				reset -w
			fi;
		fi
	fi

	# That means that we've validated already boot image over secondary path
	# So we can update stable primary path with that images
	if test "${fiovb.bootupgrade_available}" = "1" && test "${fiovb.upgrade_available}" = "0"; then
		if test -z "${custom_apply_stable}"; then
			echo "${fio_msg} update primary boot path with validated images from ${image_dir_path} ..."

			setenv image_path "${image_dir_path}/${bootloader_image}"
			setenv start_blk "${bootloader}"
			run load_image
			run update_primary_image

			setenv image_path "${image_dir_path}/${bootloader2_image}"
			setenv start_blk "${bootloader2}"
			run load_image
			run update_primary_image2

			run set_primary_boot
		else
			run custom_apply_stable
		fi

		run bootcmd_bootenv

		if test -n "${fiovb_rpmb}"; then
			fiovb write_pvalue bootupgrade_available 0;
			fiovb write_pvalue bootfirmware_version "${bootfirmware_version}";
		else
			setenv bootupgrade_available 0;
			setenv bootfirmware_version "${bootfirmware_version}";
			setenv fiovb.bootfirmware_version "${bootfirmware_version}";
		fi

		run saveenv_mmc
		echo "${fio_msg} reset ..."
		reset
	fi
else
	# If we are validating secondary boot path, Linux should force reboot back to
	# primary path after running reboot cmd (this is needed for boards without
	# software POR reset support, like Apalis iMX6)
	echo "${fiovb_msg} Forcing secondary boot to 0 after reboot"
	run set_primary_boot
fi
@@INCLUDE_COMMON_FOOTER@@
