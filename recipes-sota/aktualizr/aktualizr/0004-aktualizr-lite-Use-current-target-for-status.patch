From 7006e5e3ea0283c56510b3834633dfbaa28ce598 Mon Sep 17 00:00:00 2001
From: Andy Doan <andy@foundries.io>
Date: Wed, 10 Jul 2019 18:17:26 -0500
Subject: [PATCH 04/14] aktualizr-lite: Use current target for status

Now that we are tracking the installed target properly, we can use
getCurrent to make this easier and more informative.

This also uses a reverse iterator for the OstreeManager:getCurrent
method. In the event you have two targets with the same hash, you
should probably match on the newest one rather than the oldest one.

Signed-off-by: Andy Doan <andy@foundries.io>
---
 src/aktualizr_lite/main.cc                    | 56 +++++++++++--------
 src/aktualizr_lite/test_lite.sh               |  7 +++
 .../package_manager/ostreemanager.cc          |  4 +-
 3 files changed, 41 insertions(+), 26 deletions(-)

diff --git a/src/aktualizr_lite/main.cc b/src/aktualizr_lite/main.cc
index 65425044..9bc6efad 100644
--- a/src/aktualizr_lite/main.cc
+++ b/src/aktualizr_lite/main.cc
@@ -72,14 +72,41 @@ static std::shared_ptr<SotaUptaneClient> liteClient(Config &config, std::shared_
   return client;
 }
 
+static void log_info_target(const std::string &prefix, const Config &config, const Uptane::Target &t) {
+  auto name = t.filename();
+  if (t.custom_version().length() > 0) {
+    name = t.custom_version();
+  }
+  LOG_INFO << prefix + name << "\tsha256:" << t.sha256Hash();
+  if (config.pacman.type == PackageManager::kOstreeDockerApp) {
+    bool shown = false;
+    auto apps = t.custom_data()["docker_apps"];
+    for (Json::ValueIterator i = apps.begin(); i != apps.end(); ++i) {
+      if (!shown) {
+        shown = true;
+        LOG_INFO << "\tDocker Apps:";
+      }
+      if ((*i).isObject() && (*i).isMember("filename")) {
+        LOG_INFO << "\t\t" << i.key().asString() << " -> " << (*i)["filename"].asString();
+      } else {
+        LOG_ERROR << "\t\tInvalid custom data for docker-app: " << i.key().asString();
+      }
+    }
+  }
+}
+
 static int status_main(Config &config, const bpo::variables_map &unused) {
   (void)unused;
-  GObjectUniquePtr<OstreeSysroot> sysroot_smart = OstreeManager::LoadSysroot(config.pacman.sysroot);
-  OstreeDeployment *deployment = ostree_sysroot_get_booted_deployment(sysroot_smart.get());
-  if (deployment == nullptr) {
+  auto target = liteClient(config, nullptr)->getCurrent();
+
+  if (target.MatchTarget(Uptane::Target::Unknown())) {
     LOG_INFO << "No active deployment found";
   } else {
-    LOG_INFO << "Active image is: " << ostree_deployment_get_csum(deployment);
+    auto name = target.filename();
+    if (target.custom_version().length() > 0) {
+      name = target.custom_version();
+    }
+    log_info_target("Active image is: ", config, target);
   }
   return 0;
 }
@@ -102,26 +129,7 @@ static int list_main(Config &config, const bpo::variables_map &unused) {
   for (auto &t : client->allTargets()) {
     for (auto const &it : t.hardwareIds()) {
       if (it == hwid) {
-        auto name = t.filename();
-        if (t.custom_version().length() > 0) {
-          name = t.custom_version();
-        }
-        LOG_INFO << name << "\tsha256:" << t.sha256Hash();
-        if (config.pacman.type == PackageManager::kOstreeDockerApp) {
-          bool shown = false;
-          auto apps = t.custom_data()["docker_apps"];
-          for (Json::ValueIterator i = apps.begin(); i != apps.end(); ++i) {
-            if (!shown) {
-              shown = true;
-              LOG_INFO << "\tDocker Apps:";
-            }
-            if ((*i).isObject() && (*i).isMember("filename")) {
-              LOG_INFO << "\t\t" << i.key().asString() << " -> " << (*i)["filename"].asString();
-            } else {
-              LOG_ERROR << "\t\tInvalid custom data for docker-app: " << i.key().asString();
-            }
-          }
-        }
+        log_info_target("", config, t);
         break;
       }
     }
diff --git a/src/aktualizr_lite/test_lite.sh b/src/aktualizr_lite/test_lite.sh
index 5d769b5a..2dbb2eb5 100755
--- a/src/aktualizr_lite/test_lite.sh
+++ b/src/aktualizr_lite/test_lite.sh
@@ -107,3 +107,10 @@ OSTREE_HASH=$sha LD_PRELOAD=$mock_ostree $valgrind $aklite --loglevel 1 -c $sota
 ostree admin status
 
 OSTREE_HASH=$sha LD_PRELOAD=$mock_ostree $valgrind $aklite --loglevel 1 -c $sota_dir/sota.toml update | grep "Updating to: Target(zlast"
+
+out=$(OSTREE_HASH="$sha" LD_PRELOAD=$mock_ostree $valgrind $aklite --loglevel 1 -c $sota_dir/sota.toml status)
+if [[ ! "$out" =~ "Active image is: zlast	sha256:$sha" ]] ; then
+    echo "ERROR: status incorrect:"
+    echo $out
+    exit 1
+fi
diff --git a/src/libaktualizr/package_manager/ostreemanager.cc b/src/libaktualizr/package_manager/ostreemanager.cc
index e2f2ab8e..21658dc2 100644
--- a/src/libaktualizr/package_manager/ostreemanager.cc
+++ b/src/libaktualizr/package_manager/ostreemanager.cc
@@ -272,8 +272,8 @@ Uptane::Target OstreeManager::getCurrent() const {
   storage_->loadPrimaryInstalledVersions(&installed_versions, nullptr, nullptr);
 
   // Version should be in installed versions
-  std::vector<Uptane::Target>::iterator it;
-  for (it = installed_versions.begin(); it != installed_versions.end(); it++) {
+  std::vector<Uptane::Target>::reverse_iterator it;
+  for (it = installed_versions.rbegin(); it != installed_versions.rend(); it++) {
     if (it->sha256Hash() == current_hash) {
       return *it;
     }
-- 
2.23.0

